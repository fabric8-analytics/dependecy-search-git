{"jorgebastida/glue": {"git_readme": "Glue\n====\n\n.. image:: https://badge.fury.io/py/glue.png\n    :target: http://badge.fury.io/py/glue\n\n.. image:: https://travis-ci.org/jorgebastida/glue.png?branch=master\n    :target: https://travis-ci.org/jorgebastida/glue\n\n.. image:: https://coveralls.io/repos/jorgebastida/glue/badge.png?branch=master\n    :target: https://coveralls.io/r/jorgebastida/glue?branch=master\n\n.. image:: https://pypip.in/d/glue/badge.png\n    :target: https://crate.io/packages/glue/\n\n\nGlue is a simple command line tool to generate sprites::\n\n    $ glue source output\n\n* The latest documentation is available at: http://glue.readthedocs.org\n* Installation instructions: http://glue.readthedocs.org/en/latest/installation.html\n* Glue-users mailing list: https://groups.google.com/forum/#!forum/glue-users\n\nFeatures\n--------\n* Automatic Sprite (Image + Metadata) creation including:\n\n  - css (less, scss)\n  - cocos2d\n  - json (array, hash)\n  - CAAT\n\n* Automatic multi-dpi `retina <http://glue.readthedocs.org/en/latest/ratios.html>`_ sprite creation.\n* Support for multi-sprite projects.\n* Create sprites from multiple folders (recursively).\n* Multiple `algorithms <http://glue.readthedocs.org/en/latest/options.html#a-algorithm>`_ available.\n* Automatic `crop of unnecessary transparent borders <http://glue.readthedocs.org/en/latest/quickstart.html#crop-unnecessary-transparent-spaces>`_ around source images.\n* Configurable `paddings and margin per image, sprite or project <http://glue.readthedocs.org/en/latest/paddings.html>`_.\n* Watch option to keep glue running watching for file changes.\n* Project-, Sprite- and Image-level configuration via static config files.\n* Customizable `output <http://glue.readthedocs.org/en/latest/options.html#global-template>`_ using jinja templates.\n* CSS: Optional .less/.scss output format.\n* CSS: Configurable `cache busting for sprite images <http://glue.readthedocs.org/en/latest/options.html#cachebuster>`_.\n* CSS: Customizable `class names <http://glue.readthedocs.org/en/latest/options.html#separator>`_.\n* Python ``2.6``, ``2.7`` and ``3.3+`` supported.\n* Really `well tested <https://coveralls.io/r/jorgebastida/glue?branch=master>`_.\n\nExample\n-------\nUsing the gorgeous `famfamfam icons <http://www.famfamfam.com/lab/icons/silk/>`_ (4.2Mb) you will get\nthe following ``icons.png`` (401Kb).\n\n.. image:: https://github.com/jorgebastida/glue/raw/master/docs/img/famfamfam1.png\n\n\nAnd also an ``icons.css`` with all the necessary CSS classes for this sprite::\n\n    .sprite-icons-zoom_out{ background:url('icons.png'); top:0; left:0; no-repeat;}\n    .sprite-icons-zoom_in{ background:url('icons.png'); top:0; left:-16; no-repeat;}\n    .sprite-icons-zoom{ background:url('icons.png'); top:-16; left:0; no-repeat;}\n    .sprite-icons-xhtml_valid{ background:url('icons.png'); top:-16; left:-16; no-repeat;}\n    ...\n\n\nDo you want to know more? Visit the quickstart guide: http://glue.readthedocs.org/en/latest/quickstart.html\n\nContribute\n-----------\n\n* Fork the repository on GitHub to start making your changes to the master branch (or branch off of it).\n* Write a test which shows that the bug was fixed or that the feature works as expected.\n\n  - Use ``python setup.py test``\n\n* Send a pull request and bug the maintainer until it gets merged and published. :) Make sure to add yourself to AUTHORS.\n\n\nIs your company using glue?\n---------------------------\nWe are creating a list of companies using glue in production. If your company use ``glue``, please send `me <mailto:me@jorgebastida.com>`_ an email or send me a message to `@jorgebastida <https://twitter.com/jorgebastida>`_ . I would really appreciate it.\n\n\nWe need your help\n------------------\n\nThere are several features that ``glue`` users would love to have... but they require a substancial amount of work and dedication, so we are looking for feature-sponsors! If you want to lead the development/testing of any of the following features, please contact `Jorge Bastida <mailto:me@jorgebastida.com>`_.\n\nHere you have some examples:\n\n* Windows support (I'm not a Windows user, ``glue`` needs somebody who care about how ``glue`` works on Windows and write down some installation instructions).\n* Cocos2d Format (Already exists, but we need somebody to give it some love).\n* New Formats (After 0.9, ``glue`` is ready to accept new output formats - If you want to create a new format, contact me).\n* Binary packaging for OSX and Windows (For some users it would be really cool if they were able to download an already packaged binary version).\n", "git_description": "", "git_keywords": [""], "pypi_description": "Glue is a simple command line tool to generate sprites using any kind of source images like PNG, JPEG or GIF. Glue will generate a unique PNG file containing every source image and a map file including the necessary information to use it.", "pypi_keywords": "glue,sprites,css,cocos2d"}, "svanoort/pyresttest": {"git_readme": "pyresttest\n==========\n\n# Table of Contents\n\n- [What Is It?](#what-is-it)\n- [Status](#status)\n- [Installation](#installation)\n- [Sample Test](#sample-test)\n- [Examples](#examples)\n- [Installation](#installation)\n- [How Do I Use It?](#how-do-i-use-it)\n\t- [Running A Simple Test](#running-a-simple-test)\n\t- [Using JSON Validation](#using-json-validation)\n\t- [Interactive Mode](#interactive-mode)\n\t- [Verbose Output](#verbose-output)\n- [Other Goodies](#other-goodies)\n- [Basic Test Set Syntax](#basic-test-syntax)\n\t- [Import example](#import-example)\n\t- [Url Test](#url-test-with-timeout)\n\t- [Custom HTTP Options (special curl settings)](#custom-http-options-special-curl-settings)\n\t- [Syntax Limitations](#syntax-limitations)\n- [Benchmarking?](#benchmarking)\n\t- [Metrics](#metrics)\n\t- [Benchmark report formats:](#benchmark-report-formats)\n- [RPM-based installation](#rpm-based-installation)\n- [Project Policies](#project-policies)\n- [FAQ](#faq)\n- [Feedback and Contributions](#feedback-and-contributions)\n\n# What Is It?\n- A REST testing and API microbenchmarking tool\n- Tests are defined in basic YAML or JSON config files, no code needed\n- Minimal dependencies (pycurl, pyyaml, optionally future), making it easy to deploy on-server for smoketests/healthchecks\n- Supports [generate/extract/validate](advanced_guide.md) mechanisms to create full test scenarios\n- Returns exit codes on failure, to slot into automated configuration management/orchestration tools (also supplies parseable logs)\n- Logic is written and [extensible](extensions.md) in Python\n\n# Status\n\n**NEW: Full Python 3 Support in Alpha** - download it, 'pip install future' and give it a try!\n \nApache License, Version 2.0\n\n![Status Badge](http://52.4.228.82:8080/jenkins/buildStatus/icon?job=set-main-build-status) [![PyPI version](https://badge.fury.io/py/pyresttest.svg)](https://badge.fury.io/py/pyresttest) \n[![PyPI](https://img.shields.io/pypi/dm/Pyresttest.svg)]()\n\n[![Join the chat at https://gitter.im/svanoort/pyresttest](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/svanoort/pyresttest?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[Changelog](CHANGELOG.md) shows the past and present, [milestones](https://github.com/svanoort/pyresttest/milestones) show the future roadmap.\n\n* The changelog will also show features/fixes currently merged to the master branch but not released to PyPi yet (pending installation tests across platforms). \n\n# Installation\nPyRestTest works on Linux or Mac with Python 2.6, 2.7, or 3.3+ (with module 'future' installed)\n\n**First we need to install package python-pycurl:**\n* Ubuntu/Debian: (sudo) `apt-get install python-pycurl`\n* CentOS/RHEL: (sudo) `yum install python-pycurl`\n* Alpine: (sudo) `apk add curl-dev`\n* Mac: *don't worry about it*\n* Other platforms: *unsupported.*  You *may* get it to work by installing pycurl & pyyaml manually. Also include 'future' for Python 3. No guarantees though.\n*This is needed because the pycurl dependency may fail to install by pip.  In *very rare* cases you may need to intall python-pyyaml if pip cannot install it correctly.*\n\n**It is easy to install the latest release by pip:**\n(sudo) `pip install pyresttest`  (also install 'future' if on Python 3)\n\n**If pip isn't installed, we'll want to install it first:**\nIf that is not installed, we'll need to install it first:\n* Ubuntu/Debian: (sudo) `apt-get install python-pip`\n* CentOS/RHEL: (sudo) `yum install python-pip`\n* Mac OS X with homebrew: `brew install python`  (it's included)\n* Or with just python installed: `wget https://bootstrap.pypa.io/get-pip.py && sudo python get-pip.py`\n\n**Releases occur every few months, if you want to use unreleased features, it's easy to install from source:**\n\n*See the [Change Log](CHANGELOG.md) for feature status.*\n\n```shell\ngit clone https://github.com/svanoort/pyresttest.git\ncd pyresttest\nsudo python setup.py install\n```\n\nThe master branch tracks the latest; it is unit tested, but less stable than the releases (the 'stable' branch tracks tested releases).\n\n\n## Troubleshooting Installation\n\nAlmost all installation issues are due to problems with PyCurl and PyCurl's native libcurl bindings. It is easy to check if PyCurl is installed correctly:\n\n`python -c 'import pycurl'`\n\nIf this returns correctly, pycurl is installed, if you see an ImportError or similar, it isn't.\nYou may also verify the pyyaml installation as well, since that can fail to install by pip in rare circumstances.\n\n### Error installing by pip\n`__main__.ConfigurationError: Could not run curl-config: [Errno 2] No such file or directory`\n\nThis is caused by libcurl not being installed or recognized: first install pycurl using native packages as above.  Alternately, try installing just the libcurl libraries:\n\n- On Ubuntu/Debian: `sudo apt-get install libcurl4-openssl-dev`\n- On CentOS/RHEL: `yum install libcurl-devel`\n\n## VirtualEnv installation\nPyCurl *should* install by pip, but sometimes has issues with pycurl/libcurl.\nManually copying in a working system pycurl installation may help:\n\n`cp /usr/lib/python2.7/dist-packages/pycurl* env/local/lib/python2.7/site-packages/`\n\n# Sample Test\n**This will check that APIs accept operations, and will smoketest an application**\n```yaml\n---\n- config:\n    - testset: \"Basic tests\"\n    - timeout: 100  # Increase timeout from the default 10 seconds\n- test: \n    - name: \"Basic get\"\n    - url: \"/api/person/\"\n- test: \n    - name: \"Get single person\"\n    - url: \"/api/person/1/\"\n- test: \n    - name: \"Delete a single person, verify that works\"\n    - url: \"/api/person/1/\"\n    - method: 'DELETE'\n- test: # create entity by PUT\n    - name: \"Create/update person\"\n    - url: \"/api/person/1/\"\n    - method: \"PUT\"\n    - body: '{\"first_name\": \"Gaius\",\"id\": 1,\"last_name\": \"Baltar\",\"login\": \"gbaltar\"}'\n    - headers: {'Content-Type': 'application/json'}\n    - validators:  # This is how we do more complex testing!\n        - compare: {header: content-type, comparator: contains, expected:'json'}\n        - compare: {jsonpath_mini: 'login', expected: 'gbaltar'}  # JSON extraction\n        - compare: {raw_body:\"\", comparator:contains, expected: 'Baltar' }  # Tests on raw response\n- test: # create entity by POST\n    - name: \"Create person\"\n    - url: \"/api/person/\"\n    - method: \"POST\"\n    - body: '{\"first_name\": \"William\",\"last_name\": \"Adama\",\"login\": \"theadmiral\"}'\n    - headers: {Content-Type: application/json}\n  ```\n# Examples\n* The [Quickstart](quickstart.md) should be *everyone's* starting point\n* Here's a [really good example](examples/miniapp-extract-validate.yaml) for how to create a user and then do tests on it.  \n  - This shows how to use extraction from responses, templating, and different test types\n* If you're trying to do something fancy, take a look at the [content-test.yaml](pyresttest/content-test.yaml).\n  - This shows most kinds of templating & variable uses. It shows how to read from file, using a variable in the file path, and templating on its content!\n* PyRestTest isn't limited to JSON; there's an [example for submitting form data](https://github.com/svanoort/pyresttest/tree/master/examples/dummyapp-posting-forms.yaml)\n* There's a [whole folder](https://github.com/svanoort/pyresttest/tree/master/examples) of example tests to help get started\n\n\n\n# How Do I Use It?\n- The [Quickstart](quickstart.md) walks through common use cases\n- Benchmarking has its [own section](#benchmarking) below\n- Advanced features have [separate documentation](advanced_guide.md) (templating, generators, content extraction, complex validation).\n- How to [extend PyRestTest](extensions.md) is its own document\n- There are a [ton of examples](https://github.com/svanoort/pyresttest/tree/master/examples)\n- @BastienAr has created an [Atom editor package](https://atom.io/packages/language-pyresttest) for PyRestTest development (thank you!)\n\n## Running A Simple Test\n\nRun a basic test of the github API:\n\n```shell\npyresttest https://api.github.com examples/github_api_smoketest.yaml\n```\n\n## Using JSON Validation\n\nA simple set of tests that show how json validation can be used to check contents of a response.\nTest includes both successful and unsuccessful validation using github API.\n\n```shell\npyresttest https://api.github.com examples/github_api_test.yaml\n```\n\n(For help: pyresttest  --help )\n\n## Interactive Mode\nSame as the other test but running in interactive mode.\n\n```shell\npyresttest https://api.github.com examples/github_api_test.yaml --interactive true --print-bodies true\n```\n\n## Verbose Output\n\n```shell\npyresttest https://api.github.com examples/github_api_test.yaml --log debug\n```\n\n\n# Other Goodies\n* Simple templating of HTTP request bodies, URLs, and validators, with user variables\n* Generators to create dummy data for testing, with support for easily writing your own\n* Sequential tests: extract info from one test to use in the next\n* Import test sets in other test sets, to compose suites of tests easily\n* Easy benchmarking: convert any test to a benchmark, by changing the element type and setting output options if needed\n* Lightweight benchmarking: ~0.3 ms of overhead per request, and plans to reduce that in the future\n* Accurate benchmarking: network measurements come from native code in LibCurl, so test overhead doesn't alter them\n* Optional interactive mode for debugging and demos\n\n# Basic Test Set Syntax\nAs you can see, tests are defined in [YAML](http://en.wikipedia.org/wiki/YAML) format.\n\nThere are 5 top level test syntax elements:\n- *url:* a simple test, fetches given url via GET request and checks for good response code\n- *test*: a fully defined test (see below)\n- *benchmark*: a fully defined benchmark (see below)\n- *config* or *configuration*: overall test configuration (timeout is the most common option)\n- *import*: import another test set file so you Don't Repeat Yourself\n\n## Import example\n```yaml\n---\n# Will load the test sets from miniapp-test.yaml and run them\n# Note that this will run AFTER the current test set is executed\n# Also note that imported tests get a new Context: any variables defined will be lost between test sets\n- import: examples/miniapp-test.yaml\n```\n\nImports are intended to let you create top-level test suites that run many independent, isolated test scenarios (test sets).\nThey may also be used to create sample data or perform cleanup *as long as you don't rely on variables to store this information.*  For example, if one testset creates a user for a set of scenarios, tests that rely on that user's ID need to start by querying the API to get the ID.\n\n## Url Test With Timeout\nA simple URL test is equivalent to a basic GET test with that URL.\nAlso shows how to use the timeout option in testset config to descrease the default timeout from 10 seconds to 1. \n\n```yaml\n---\n- config:\n    - testset: \"Basic tests\"\n    - timeout: 1\n- url: \"/api/person/\"  # This is a simple test\n- test: \n    - url: \"/api/person/\"  # This does the same thing\n```\n\n## Custom HTTP Options (special curl settings)\nFor advanced cases (example: SSL client certs), sometimes you will want to use custom Curl settings that don't have a corresponding option in PyRestTest.  \n\nThis is easy to do: for each test, you can specify custom Curl arguments with 'curl_option_optionname.'  For this, 'optionname' is case-insensitive and the optionname is a [Curl Easy Option](http://curl.haxx.se/libcurl/c/curl_easy_setopt.html) with 'CURLOPT_' removed. \n\nFor example, to follow redirects up to 5 times (CURLOPT_FOLLOWLOCATION and CURLOPT_MAXREDIRS):\n```yaml\n---\n- test: \n    - url: \"/api/person/1\"\n    - curl_option_followlocation: True\n    - curl_option_maxredirs: 5  \n```\nNote that while option names are validated, *no validation* is done on their values.\n\n## Syntax Limitations\n* Whenever possible, the YAML configuration handler tries to convert variable types as needed.  We're all responsible adults, don't do anything crazy and it will play nicely.\n* Only a handful of elements can use dynamic variables (URLs, headers, request bodies, validators) - there are plans to change this in the next few releases.\n* The templating is quite limited (it's doing simple string subsitution). There are plans to improve this in the next few releases, but it isn't there yet.\n* One caveat: *if you define the same element (example, URL) twice in the same enclosing element, the last value will be used.*  In order to preserve sanity, I use last-value wins.\n* No support for \"for-each\" on requests/responses natively - this can be done via custom extensions, and may be available in the *distant* future but it's a while out.\n\n# Benchmarking?\nOh, yes please! PyRestTest allows you to collect low-level network performance metrics from Curl itself.\n\nBenchmarks are based off of tests: they extend the configuration elements in a test, allowing you to configure the REST call similarly.\nHowever, they do not perform validation on the HTTP response, instead they collect metrics.\n\nThere are a few custom configuration options specific to benchmarks:\n- *warmup_runs*: (default 10 if unspecified) run the benchmark calls this many times before starting to collect data, to allow for JVM warmup, caching, etc\n- *benchmark_runs*: (default 100 if unspecified) run the benchmark this many times to collect data\n- *output_file*: (default is None) file name to write benchmark output to, will get overwritten with each run, if none given, will write to terminal only\n- *output_format*: (default CSV if unspecified) format to write the results in ('json' or 'csv'). More on this below.\n- *metrics*: which metrics to gather (explained below), MUST be specified or benchmark will do nothing\n\n\n## Metrics\nThere are two ways to collect performance metrics: raw data, and aggregated stats.\nEach metric may yield raw data, plus one or more aggregate values.\n- *Raw Data*: returns an array of values, one for each benchmark run\n- *Aggregates*: runs a reduction function to return a single value over the entire benchmark run (median, average, etc)\n\nTo return raw data, in the 'metrics' configuration element, simply input the metric name in a list of values.\nThe example below will return raw data for total time and size of download (101 values each).\n\n```\n- benchmark: # create entity\n    - name: \"Basic get\"\n    - url: \"/api/person/\"\n    - warmup_runs: 7\n    - 'benchmark_runs': '101'\n    - output_file: 'miniapp-benchmark.csv'\n    - metrics:\n        - total_time\n        - size_download\n```\n\nAggregates are pretty straightforward:\n- *mean* or *mean_arithmetic*: arithmetic mean of data (normal 'average')\n- *mean_harmonic*: harmonic mean of data (useful for rates)\n- *median*: median, the value in the middle of sorted result set\n- *std_deviation*: standard deviation of values, useful for measuring how consistent they are\n- *total* or *sum*: total up the values given\n\nCurrently supported metrics are listed below, and these are a subset of Curl get_info variables.\nThese variables are explained here (with the CURLINFO_ prefix removed): [curl_easy_get_info documentation](http://curl.haxx.se/libcurl/c/curl_easy_getinfo.html)\n\n*Metrics:*\n'appconnect_time', 'connect_time', 'namelookup_time', 'num_connects', 'pretransfer_time', 'redirect_count', 'redirect_time', 'request_size', 'size_download', 'size_upload', 'speed_download', 'speed_upload', 'starttransfer_time', 'total_time'\n\n\n## Benchmark report formats:\nCSV is the default report format.  CSV ouput will include:\n- Benchmark name\n- Benchmark group\n- Benchmark failure count (raw HTTP failures)\n- Raw data arrays, as a table, with headers being the metric name, sorted alphabetically\n- Aggregates: a table of results in the format of (metricname, aggregate_name, result)\n\nIn JSON, the data is structured slightly differently:\n```\n{\"failures\": 0,\n\"aggregates\":\n    [[\"metric_name\", \"aggregate\", \"aggregateValue\"] ...],\n\"failures\": failureCount,\n\"group\": \"Default\",\n\"results\": {\"total_time\": [value1, value2, etc], \"metric2\":[value1, value2, etc], ... }\n}\n```\n\nSamples:\n```\n---\n- config:\n    - testset: \"Benchmark tests using test app\"\n\n- benchmark: # create entity\n    - name: \"Basic get\"\n    - url: \"/api/person/\"\n    - warmup_runs: 7\n    - 'benchmark_runs': '101'\n    - output_file: 'miniapp-benchmark.csv'\n    - metrics:\n        - total_time\n        - total_time: mean\n        - total_time: median\n        - size_download\n        - speed_download: median\n\n- benchmark: # create entity\n    - name: \"Get single person\"\n    - url: \"/api/person/1/\"\n    - metrics: {speed_upload: median, speed_download: median, redirect_time: mean}\n    - output_format: json\n    - output_file: 'miniapp-single.json'\n```\n\n# RPM-based installation\n\n## Pure RPM-based install?\nIt's easy to build and install from RPM:\n\n## Building the RPM:\n```shell\npython setup.py bdist_rpm  # Build RPM\nfind -iname '*.rpm'   # Gets the RPM name\n```\n### Installing from RPM\n```shell\nsudo yum localinstall my_rpm_name\nsudo yum install PyYAML python-pycurl  # If using python3, needs 'future' too\n```\n- You need to install PyYAML & PyCurl manually because Python distutils can't translate python dependencies to RPM packages. \n\n**Gotcha:** Python distutils add a dependency on your major python version. \n**This means you can't build an RPM for a system with Python 2.6 on a Python 2.7 system.**\n\n## Building an RPM for RHEL 6/CentOS 6\nYou'll need to install rpm-build, and then it should work.\n\n```shell\nsudo yum install rpm-build\n```\n\n# Project Policies\n* PyRestTest uses the Github flow\n  - The master branch is an integration branch for mature features\n  - Releases are cut periodically from master (every 3-6 months generally, or more often if breaking bugs are present) and released to PyPi\n  - Feature development is done in feature branches and merged to master by PR when tested (validated by continuous integration in Jenkins)\n  - The 'stable' branch tracks the last release, use this if you want to run PyRestTest from source\n* [The changelog is here](CHANGELOG.md), this will show past releases and features merged to master for the next release but not released \n* Testing: tested on Ubuntu 14/python 2.7 and CentOS 6/python 6.6, plus Debian Wheezy for Python 3.4.3\n* Releases occur every few months to [PyPi](https://pypi.python.org/pypi/pyresttest/) once a few features are ready to go\n* PyRestTest uses [Semantic Versioning 2.0](http://semver.org/)\n* **Back-compatibility is important! PyRestTest makes a strong effort to maintain command-line and YAML format back-compatibility since 1.0.**\n  - [Extension method signatures](extensions.md) are maintained as much as possible. \n  - However, internal python implementations are subject to change.\n  - Major version releases (1.x to 2.x, etc) may introduce breaking API changes, but only *with a really darned good reason, and only there's not another way.*\n\n\n# Feedback and Contributions\nWe welcome any feedback you have, including pull requests, reported issues, etc!\n\n**For new contributors** there are a whole set of issues labelled with [help wanted](https://github.com/svanoort/pyresttest/labels/help%20wanted) which are excellent starting points to offer a contribution! \n\nFor instructions on how to set up a dev environment for PyRestTest, see [building.md](building.md).\n\n**For pull requests to get easily merged, please:**\n- Include unit tests (and functional tests, as appropriate) and verify that run_tests.sh passes\n- Include documentation as appropriate\n- Attempt to adhere to PEP8 style guidelines and project style\n\nBear in mind that this is largely a one-man, outside-of-working-hours effort at the moment, so response times will vary.  That said: every feature request gets heard, and even if it takes a while, all the reasonable features will get incorporated.  **If you fork the main repo, check back periodically... you may discover that the next release includes something to meet your needs and then some!**\n\n# FAQ\n\n## Why not pure-python tests?\n- This is written for an environment where Python is not the sole or primary language\n- **You totally can do pure-Python tests if you want!**  \n    - [Extensions](extensions.md) provide a stable API for adding more complex functionality in python\n    - All modules can be imported and used as libraries\n    - Gotcha: the project is still young, so internal implementation may change often, much more than YAML features\n\n## Why YAML and not XML/JSON?\n- XML is extremely verbose and has many gotchas for parsing\n- You **CAN use JSON for tests**, it's a subset of YAML. See [miniapp-test.json](examples/miniapp-test.json) for an example. \n- YAML tends to be the most concise, natural, and easy to write of these three options\n\n## Does it do load tests?\n- No, this is a separate niche and there are already many excellent tools to fill it\n- Adding load testing features would greatly increase complexity\n- But some form might come eventually!\n\n## Why do you use PyCurl and not requests?\n- Maybe eventually.  PyRestTest needs the low-level features of PyCurl for benchmarking, and benefits from its performance.  However we may eventually abstract some of the core testing features away to allow for pure-python execution\n", "git_description": "", "git_keywords": [""], "pypi_description": "Python RESTful API Testing & Microbenchmarking Tool \n Documentation at https://github.com/svanoort/pyresttest", "pypi_keywords": "rest,web,http,testing"}}