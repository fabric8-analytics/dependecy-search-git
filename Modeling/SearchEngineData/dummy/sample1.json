{"glue": "Glue is a simple command line tool to generate sprites using any kind of source images like PNG, JPEG or GIF. Glue will generate a unique PNG file containing every source image and a map file including the necessary information to use it.", "pyresttest": "Python RESTful API Testing & Microbenchmarking Tool \n Documentation at https://github.com/svanoort/pyresttest", "date-extractor": "[![Build Status](https://travis-ci.org/DanielJDufour/date-extractor.svg?branch=master)](https://travis-ci.org/DanielJDufour/date-extractor)\n\n[![Requirements Status](https://requires.io/github/DanielJDufour/date-extractor/requirements.svg?branch=master)](https://requires.io/github/DanielJDufour/date-extractor/requirements/?branch=master)\n\n[![Hex.pm](https://img.shields.io/hexpm/l/plug.svg?maxAge=2592000?style=plastic)]()\n\n# date-extractor\ndate-extractor helps you extract dates from text\n\n# Installation\n```\npip install pytz\npip install date-extractor\n```\n\n# Use\n```\nfrom date_extractor import extract_dates\ntext = \"I arrived in that city on January 4, 1937\"\ndates = extract_dates(text)\n```\n\n# Returning Precision\n```\nfrom date_extractor import extract_date\ntext = \"I arrived in that city in 1937\"\ndate, precision = extract_date(text, return_precision=True)\n# precision = 'year'\n```\n\n\n# Features\n| Languages Supported |\n| ------------------- |\n| Arabic |\n| English |\n| French |\n| Sorani (Kurdish) |\n| Turkish |\n\n# Testing\nTo test the package run\n```\npython -m unittest date_extractor.tests.test\n```\n\nIf you are using Python 3, you may need to run the following to test\n```\npython3 -m unittest date_extractor.tests.test\n```\n\n# Versions\nWorks on Python 2 and 3!\n\n# Users\nIf you use date-extractor and don't mind sharing that, let us know and we can note it on the Readme.  It will be helpful for potential users to see how people are using it.\n\n\n", "labyrinth": "########\nLabyrinth\n########\n\nLabyrinth is a maze like game created as a project in the UWPCE Python Certificate Program.\n\nThis version is set up as a complete python package\n\n\n", "pygal": "", "pyowm": "PyOWM is a client Python wrapper library for OpenWeatherMap web APIs. It allows quick and easy \nconsumption of OWM data from Python applications via a simple object model and in a human-friendly fashion.\n\n", "pyexcel-handsontable": "================================================================================\npyexcel-handsontable - Let you focus on data, instead of file formats\n================================================================================\n\n.. image:: https://raw.githubusercontent.com/pyexcel/pyexcel.github.io/master/images/patreon.png\n   :target: https://www.patreon.com/pyexcel\n\n.. image:: https://api.bountysource.com/badge/team?team_id=288537\n   :target: https://salt.bountysource.com/teams/chfw-pyexcel\n\n.. image:: https://travis-ci.org/pyexcel-renderers/pyexcel-handsontable.svg?branch=master\n   :target: http://travis-ci.org/pyexcel-renderers/pyexcel-handsontable\n\n.. image:: https://codecov.io/gh/pyexcel-renderers/pyexcel-handsontable/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/pyexcel-renderers/pyexcel-handsontable\n\n.. image:: https://img.shields.io/gitter/room/gitterHQ/gitter.svg\n   :target: https://gitter.im/pyexcel/Lobby\n\n.. image:: https://readthedocs.org/projects/pyexcel-handsontable/badge/?version=latest\n   :target: http://pyexcel-handsontable.readthedocs.org/en/latest/\n\nSupport the project\n================================================================================\n\nIf your company has embedded pyexcel and its components into a revenue generating\nproduct, please support me on `patreon <https://www.patreon.com/bePatron?u=5537627>`_\nor `bounty source <https://salt.bountysource.com/teams/chfw-pyexcel>`_ to maintain\nthe project and develop it further.\n\nIf you are an individual, you are welcome to support me too and for however long\nyou feel like. As my backer, you will receive\n`early access to pyexcel related contents <https://www.patreon.com/pyexcel/posts>`_.\n\nAnd your issues will get prioritized if you would like to become my patreon as `pyexcel pro user`.\n\nWith your financial support, I will be able to invest\na little bit more time in coding, documentation and writing interesting posts.\n\n\nKnown constraints\n==================\n\nFonts, colors and charts are not supported.\n\nIntroduction\n================================================================================\n**pyexcel-handsontable** is a rendering plugin to\n`pyexcel <http://pyexcel.readthedocs.org/en/latest>`_  and renders\n`pyexcel.Sheet` and `pyexcel.Book` into a\n`handsontable <https://handsontable.com>`_ in your web page. As long as you\nhave a browser, you could view the data. However, please note\nthat this library does not aim to replace any current excel softwares, such\nas Micorsoft Office. But it aims to extends the capability of a\nPython user/developer in viewing plain data.\n\n\nMain features:\n\n#. transform your excel sheets into excel alike html file.\n#. embed your excel sheets into your web page.\n#. show your data like excel in jupyter notebook (added in 0.0.2).\n\nHere is one liner to use it with pyexcel:\n\n.. code-block:: python\n\n    import pyexcel as p\n\n    p.save_as(file_name='your.xls', dest_file_name='your.handsontable.html')\n\nAlternatively, you can use this library with pyexcel cli module::\n\n\n    $ pip install pyexcel-cli\n    $ pyexcel transcode your.xls your.handsontable.html\n\n\nPlease remember to give this file suffix always: **handsontable.html**. It is because `handsontable.html` triggers this plugin in pyexcel.\n\n\nScreenshots\n--------------\n\nView as html\n*****************\n\n.. image:: https://github.com/pyexcel/pyexcel-handsontable/raw/master/demo/screenshot.png\n\n\nView in jupyter notebook\n**************************\n\n.. image:: https://github.com/pyexcel/pyexcel-handsontable/raw/master/demo/jupyter-demo.png\n\n\n\n\n\nInstallation\n================================================================================\n\nYou can install pyexcel-handsontable via pip:\n\n.. code-block:: bash\n\n    $ pip install pyexcel-handsontable\n\n\nor clone it and install it:\n\n.. code-block:: bash\n\n    $ git clone https://github.com/pyexcel-renderers/pyexcel-handsontable.git\n    $ cd pyexcel-handsontable\n    $ python setup.py install\n\n\n\nDevelopment guide\n================================================================================\n\nDevelopment steps for code changes\n\n#. git clone https://github.com/pyexcel/pyexcel-handsontable.git\n#. cd pyexcel-handsontable\n\nUpgrade your setup tools and pip. They are needed for development and testing only:\n\n#. pip install --upgrade setuptools pip\n\nThen install relevant development requirements:\n\n#. pip install -r rnd_requirements.txt # if such a file exists\n#. pip install -r requirements.txt\n#. pip install -r tests/requirements.txt\n\nOnce you have finished your changes, please provide test case(s), relevant documentation\nand update CHANGELOG.rst.\n\n.. note::\n\n    As to rnd_requirements.txt, usually, it is created when a dependent\n    library is not released. Once the dependecy is installed\n    (will be released), the future\n    version of the dependency in the requirements.txt will be valid.\n\n\nHow to test your contribution\n------------------------------\n\nAlthough `nose` and `doctest` are both used in code testing, it is adviable that unit tests are put in tests. `doctest` is incorporated only to make sure the code examples in documentation remain valid across different development releases.\n\nOn Linux/Unix systems, please launch your tests like this::\n\n    $ make\n\nOn Windows systems, please issue this command::\n\n    > test.bat\n\nHow to update test environment and update documentation\n---------------------------------------------------------\n\nAdditional steps are required:\n\n#. pip install moban\n#. git clone https://github.com/moremoban/setupmobans.git # generic setup\n#. git clone https://github.com/pyexcel/pyexcel-commons.git commons\n#. make your changes in `.moban.d` directory, then issue command `moban`\n\nWhat is pyexcel-commons\n---------------------------------\n\nMany information that are shared across pyexcel projects, such as: this developer guide, license info, etc. are stored in `pyexcel-commons` project.\n\nWhat is .moban.d\n---------------------------------\n\n`.moban.d` stores the specific meta data for the library.\n\nAcceptance criteria\n-------------------\n\n#. Has Test cases written\n#. Has all code lines tested\n#. Passes all Travis CI builds\n#. Has fair amount of documentation if your change is complex\n#. Please update CHANGELOG.rst\n#. Please add yourself to CONTRIBUTORS.rst\n#. Agree on NEW BSD License for your contribution\n\n\nUpdate styles\n--------------------\n\n`styles/style.scss` control the look and feel of the frame. In order to view the changes\nin that file, you will need to compile, moban and install it. Here is the sequence\nof commands::\n\n    $ make css\n    $ moban\n    $ python setup.py install\n    $ make -C demo\n\nThen please open handsontable.html from demo directory.\n\n\n\nLicense\n================================================================================\n\nNew BSD License\n\nChange log\n================================================================================\n\n0.0.2 - 19-08-2018\n--------------------------------------------------------------------------------\n\nUpdated\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n#. `#1 <https://github.com/pyexcel-renderers/pyexcel-handsontable/issues/1>`_:\n   keep the access to the rendered handsontables\n#. `#3 <https://github.com/pyexcel-renderers/pyexcel-handsontable/issues/3>`_:\n   pass on custom handsontable configurations\n\nAdded\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n#. support jupyter-notebook\n\n0.0.1 - 19-06-2017\n--------------------------------------------------------------------------------\n\nAdded\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n#. initial release\n\n", "pytorch": "You tried to install \"pytorch\". The package named for PyTorch is \"torch\"", "django-system-monitor": "README.md", "exall": "", "hookbox": "", "pysmt": "============================================================\n pySMT: A library for SMT formulae manipulation and solving\n============================================================\n\npySMT makes working with Satisfiability Modulo Theory simple.\n\nAmong others, you can:\n\n* Define formulae in a solver independent way in a simple and\n  inutitive way,\n* Write ad-hoc simplifiers and operators,\n* Dump your problems in the SMT-Lib format,\n* Solve them using one of the native solvers, or by wrapping any\n  SMT-Lib complaint solver.\n\nSupported Theories and Solvers\n==============================\npySMT provides methods to define a formula in Linear Real Arithmetic (LRA),\nReal Difference Logic (RDL), their combination (LIRA),\nEqualities and Uninterpreted Functions (EUF), Bit-Vectors (BV), and Arrays (A).\nThe following solvers are supported through native APIs:\n\n* MathSAT (http://mathsat.fbk.eu/)\n* Z3 (https://github.com/Z3Prover/z3/)\n* CVC4 (http://cvc4.cs.nyu.edu/web/)\n* Yices 2 (http://yices.csl.sri.com/)\n* CUDD (http://vlsi.colorado.edu/~fabio/CUDD/)\n* PicoSAT (http://fmv.jku.at/picosat/)\n* Boolector (http://fmv.jku.at/boolector/)\n\nAdditionally, you can use any SMT-LIB 2 compliant solver.\n\nPySMT assumes that the python bindings for the SMT Solver are installed and\naccessible from your PYTHONPATH.\n\npySMT works on both Python 3 and Python 2.\n\n\nWanna know more?\n================\n\nVisit http://www.pysmt.org", "grpc-google-iam-admin-v1": "gRPC library for google-iam-admin-v1\n\ngrpc-google-iam-admin-v1 is the IDL-derived library for the google-iam-admin (v1) service in the googleapis_ repository.\n\n.. _`googleapis`: https://github.com/googleapis/googleapis/tree/master/google/iam/admin/v1", "librabbitmq": "================================================================\n librabbitmq - Python AMQP Client using the rabbitmq-c library.\n================================================================\n\n:Version: 2.0.0\n:Download: http://pypi.python.org/pypi/librabbitmq/\n:Code: http://github.com/celery/librabbitmq/\n:Keywords: rabbitmq, amqp, messaging, librabbitmq, rabbitmq-c, python,\n           kombu, celery\n\n.. contents::\n    :local:\n\nPython bindings to the RabbitMQ C-library `rabbitmq-c`_.\nSupported by Kombu and Celery.\n\n.. _`rabbitmq-c`: https://github.com/alanxz/rabbitmq-c\n\nInstallation\n============\n\nInstall via pip::\n\n    $ pip install librabbitmq\n\nor, install via easy_install::\n\n    $ easy_install librabbitmq\n\nDownloading and installing from source\n--------------------------------------\n\nDownload the latest version from\n    http://pypi.python.org/pypi/librabbitmq/\n\nThen install it by doing the following,::\n\n    $ tar xvfz librabbitmq-0.0.0.tar.gz\n    $ cd librabbitmq-0.0.0\n    $ python setup.py build\n    # python setup.py install # as root\n\nUsing the development version\n-----------------------------\n\nYou can clone the repository by doing the following::\n\n    $ git clone git://github.com/celery/librabbitmq.git\n\nThen install it by doing the following::\n\n    $ cd librabbitmq\n    $ make install        # or make develop\n\nExamples\n========\n\nUsing with Kombu::\n\n    >>> from kombu import Connection\n    >>> x = Connection(\"librabbitmq://\")\n\n\nStand-alone::\n\n    >>> from librabbitmq import Connection\n\n    >>> conn = Connection(host=\"localhost\", userid=\"guest\",\n    ...                   password=\"guest\", virtual_host=\"/\")\n\n    >>> channel = conn.channel()\n    >>> channel.exchange_declare(exchange, type, ...)\n    >>> channel.queue_declare(queue, ...)\n    >>> channel.queue_bind(queue, exchange, routing_key)\n\nProducing\n---------\n\n::\n\n    >>> channel.basic_publish(body, exchange, routing_key, ...)\n\nConsuming\n---------\n\n::\n\n    >>> def dump_message(message):\n    ...     print(\"Body:'%s', Properties:'%s', DeliveryInfo:'%s'\" % (\n    ...         message.body, message.properties, message.delivery_info))\n    ...     message.ack()\n\n    >>> channel.basic_consume(queue, ..., callback=dump_message)\n\n    >>> while True:\n    ...    connection.drain_events()\n\nPoll\n----\n\n::\n\n    >>> message = channel.basic_get(queue, ...)\n    >>> if message:\n    ...     dump_message(message)\n    ...     print(\"Body:'%s' Properties:'%s' DeliveryInfo:'%s'\" % (\n    ...         message.body, message.properties, message.delivery_info))\n\n\nOther\n-----\n\n::\n\n    >>> channel.queue_unbind(queue, ...)\n    >>> channel.close()\n    >>> connection.close()\n\nLicense\n=======\n\nThis software is licensed under the ``Mozilla Public License``.\nSee the ``LICENSE-MPL-RabbitMQ`` file in the top distribution directory\nfor the full license text.\n\n.. # vim: syntax=rst expandtab tabstop=4 shiftwidth=4 shiftround\n\n\n", "scikits-cuda": "", "k2plr": "\nA fork of the `kplr` package with custom `K2` functionality.\nEnables access to the `K2` raw and de-trended light curves.\n\n\n", "google-auth-httplib2": "``httplib2`` Transport for Google Auth\n======================================\n\n|pypi|\n\nThis library provides an `httplib2`_ transport for `google-auth`_.\n\n.. note:: ``httplib`` has lots of problems such as lack of threadsafety\n    and insecure usage of TLS. Using it is highly discouraged. This\n    library is intended to help existing users of ``oauth2client`` migrate to\n    ``google-auth``.\n\n.. |pypi| image:: https://img.shields.io/pypi/v/google-auth-httplib2.svg\n   :target: https://pypi.python.org/pypi/google-auth-httplib2\n\n.. _httplib2: https://github.com/httplib2/httplib2\n.. _google-auth: https://github.com/GoogleCloudPlatform/google-auth-library-python/\n\nInstalling\n----------\n\nYou can install using `pip`_::\n\n    $ pip install google-auth-httplib2\n\n.. _pip: https://pip.pypa.io/en/stable/\n\nLicense\n-------\n\nApache 2.0 - See `the LICENSE`_ for more information.\n\n.. _the LICENSE: https://github.com/GoogleCloudPlatform/google-auth-library-python/blob/master/LICENSE\n\n\n", "icon-font-to-png": "Icon Font to PNG\n================\n\n|Build status| |Test coverage| |PyPI version| |Python versions|\n|License|\n\nPython script (and library) for easy and simple export of icons from web\nicon fonts (e.g. Font Awesome, Octicons) as PNG images. The best part is\nthe provided shell script, but you can also use it's functionality\ndirectly in your (*probably awesome*) Python project.\n\nThere's also ``font-awesome-to-png`` script for backwards compatibility\nwith the `first <https://github.com/odyniec/font-awesome-to-png>`__\niteration of the concept.\n\nInstallation\n------------\n\nMake sure you have required packages for `Pillow\ninstallation <https://pillow.readthedocs.org/en/latest/installation.html>`__.\n\n>From PyPI (recommended):\n\n::\n\n    $ pip install icon_font_to_png\n\nWith ``git clone``:\n\n.. code:: shell\n\n    $ git clone https://github.com/Pythonity/icon-font-to-png\n    $ pip install -r icon-font-to-png/requirements.txt\n    $ cd icon-font-to-png/bin\n\nOS X\n~~~~\n\nAs reported\n`here <https://github.com/Pythonity/icon-font-to-png/issues/2#issuecomment-197068427>`__,\nto install it on OS X:\n\n::\n\n    $ pip install icon_font_to_png --ignore-installed six\n\nUsage\n-----\n\n::\n\n    usage: icon-font-to-png [-h] [--list] [--download {font-awesome,octicons}]\n                            [--ttf TTF-FILE] [--css CSS-FILE] [--size SIZE]\n                            [--scale SCALE] [--color COLOR] [--filename FILENAME]\n                            [--keep_prefix]\n                            [icons [icons ...]]\n\n    Exports font icons as PNG images.\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --list                list all available icon names and exit\n      --download {font-awesome,octicons}\n                            download latest icon font and exit\n\n    required arguments:\n      --ttf TTF-FILE        path to TTF file\n      --css CSS-FILE        path to CSS file\n\n    exporting icons:\n      icons                 names of the icons to export (or 'ALL' for all icons)\n      --size SIZE           icon size in pixels (default: 16)\n      --scale SCALE         scaling factor between 0 and 1, or 'auto' for\n                            automatic scaling (default: auto); be careful, as\n                            setting it may lead to icons being cropped\n      --color COLOR         color name or hex value (default: black)\n      --filename FILENAME   name of the output file (without '.png' extension);\n                            it's used as a prefix if multiple icons are exported\n      --keep_prefix         do not remove common icon prefix (i.e. 'fa-arrow-\n                            right' instead of 'arrow-right')\n\nExamples\n--------\n\nDownload latest Font Awesome:\n\n::\n\n    $ icon-font-to-png --download font-awesome\n\nList all available icons:\n\n::\n\n    $ icon-font-to-png --css font-awesome.css --ttf fontawesome-webfont.ttf --list\n\nExport 'play' and 'stop' icons, size 64x64:\n\n::\n\n    $ icon-font-to-png --css font-awesome.css --ttf fontawesome-webfont.ttf --size 64 play stop\n\nExport all icons in blue:\n\n::\n\n    $ icon-font-to-png --css font-awesome.css --ttf fontawesome-webfont.ttf --color blue ALL\n\nExport all icons in blue, but using it's hex value:\n\n::\n\n    $ icon-font-to-png --css font-awesome.css --ttf fontawesome-webfont.ttf --color '#0000ff' ALL\n\nOr you can use ``font-awesome-to-png``, without css and ttf arguments:\n\n::\n\n    $ font-awesome-to-png ALL\n\nAPI\n---\n\nYou can use ``IconFont`` (and ``IconFontDownloader`` for that matter)\ndirectly inside your Python project. There's no proper documentation as\nof now, but the code is commented and *should* be pretty straightforward\nto use.\n\nThat said - feel free to ask me via\n`email <mailto:pawel.ad@gmail.com>`__ or [GitHub issues][github add\nissue] if anything is unclear.\n\nTests\n-----\n\nPackage was tested with the help of ``py.test`` and ``tox`` on Python\n2.7, 3.4, 3.5 and 3.6 (see ``tox.ini``).\n\nCode coverage is available at\n`Coveralls <https://coveralls.io/github/Pythonity/icon-font-to-png>`__.\n\nTo run tests yourself you need to run ``tox`` inside the repository:\n\n.. code:: shell\n\n    $ pip install -r requirements/dev.txt\n    $ tox\n\nContributions\n-------------\n\nPackage source code is available at\n`GitHub <https://github.com/Pythonity/icon-font-to-png>`__.\n\nFeel free to use, ask, fork, star, report bugs, fix them, suggest\nenhancements, add functionality and point out any mistakes. Thanks!\n\nAuthors\n-------\n\nDeveloped and maintained by `Pythonity <http://pythonity.com/>`__.\n\nOriginal version by `Micha\u0142\nWojciechowski <https://github.com/odyniec>`__, refactored by `Pawe\u0142\nAdamczak <https://github.com/pawelad>`__.\n\n.. |Build status| image:: https://img.shields.io/travis/Pythonity/icon-font-to-png.svg\n   :target: https://travis-ci.org/Pythonity/icon-font-to-png\n.. |Test coverage| image:: https://img.shields.io/coveralls/Pythonity/icon-font-to-png.svg\n   :target: https://coveralls.io/github/Pythonity/icon-font-to-png\n.. |PyPI version| image:: https://img.shields.io/pypi/v/icon_font_to_png.svg\n   :target: https://pypi.python.org/pypi/icon_font_to_png\n.. |Python versions| image:: https://img.shields.io/pypi/pyversions/icon_font_to_png.svg\n   :target: https://pypi.python.org/pypi/icon_font_to_png\n.. |License| image:: https://img.shields.io/github/license/Pythonity/icon-font-to-png.svg\n   :target: https://github.com/Pythonity/icon-font-to-png/blob/master/LICENSE\n\n\n", "pyspotify": "*********\npyspotify\n*********\n\npyspotify provides a Python interface to\n`Spotify's <http://www.spotify.com/>`__ online music streaming service.\n\nWith pyspotify you can access music metadata, search in Spotify's library of\n20+ million tracks, manage your Spotify playlists, and play music from\nSpotify. All from your own Python applications.\n\npyspotify use `CFFI <https://cffi.readthedocs.org/>`_ to make a pure Python\nwrapper around the official `libspotify\n<https://developer.spotify.com/technologies/libspotify/>`__ library. It works\non CPython 2.7 and 3.3+, as well as PyPy 2.6+ and PyPy3 2.5+.  It is known to\nwork on Linux and OS X. Windows support should be possible, but is awaiting a\ncontributor with the interest and knowledge to maintain it.\n\n\nlibspotify's deprecation\n========================\n\nNote that as of May 2015 libspotify is officially deprecated by Spotify and is\nno longer actively maintained.\n\nSpotify has published newer libraries intended for Android and iOS development,\nas well as web APIs to access track metadata and manage playlists. Though, for\nmaking apps with Spotify playback capabilities, on any other platform than\nAndroid and iOS, there is currently no alternative to libspotify.\n\nlibspotify has been the main way of integrating with Spotify since 2009, and is\ntoday a part of numerous open source projects and commercial applications,\nincluding many receivers and even cars. There's no guarantees, but one can hope\nthat the large deployment of libspotify means that the library will continue to\nwork with the Spotify service for a long time into the future.\n\n\nProject resources\n=================\n\n- `Documentation <http://pyspotify.mopidy.com/>`_\n- `Source code <https://github.com/mopidy/pyspotify>`_\n- `Issue tracker <https://github.com/mopidy/pyspotify/issues>`_\n- `CI server <https://travis-ci.org/mopidy/pyspotify>`_\n- `Download development snapshot <https://github.com/mopidy/pyspotify/archive/v2.x/develop.tar.gz#egg=pyspotify-dev>`_\n- IRC: ``#mopidy`` at `irc.freenode.net <http://freenode.net/>`_\n\n.. image:: https://img.shields.io/pypi/v/pyspotify.svg?style=flat\n    :target: https://pypi.python.org/pypi/pyspotify/\n    :alt: Latest PyPI version\n\n.. image:: https://img.shields.io/pypi/dm/pyspotify.svg?style=flat\n    :target: https://pypi.python.org/pypi/pyspotify/\n    :alt: Number of PyPI downloads\n\n.. image:: https://img.shields.io/travis/mopidy/pyspotify/v2.x/develop.svg?style=flat\n    :target: https://travis-ci.org/mopidy/pyspotify\n    :alt: Travis CI build status\n\n.. image:: https://img.shields.io/coveralls/mopidy/pyspotify/v2.x/develop.svg?style=flat\n   :target: https://coveralls.io/r/mopidy/pyspotify?branch=v2.x/develop\n   :alt: Test coverage", "highered": ""}