{"jorgebastida/glue": {"git_readme_clean": "glue image target image target image target image target glue simple command line tool generate sprites latest documentation available installation instructions mailing list features automatic sprite image metadata creation including css less scss json array hash caat automatic sprite creation support projects create sprites multiple folders recursively multiple available automatic around source images configurable watch option keep glue running watching file changes configuration via static config files customizable using jinja templates css optional output format css configurable css customizable python supported really example using gorgeous get following image also necessary css classes sprite want know visit quickstart guide contribute fork repository github start making changes master branch branch write test shows bug fixed feature works expected use send pull request bug maintainer gets merged published make sure add authors company using glue creating list companies using glue production company use please send email send message would really appreciate need help several features users would love require substancial amount work dedication looking want lead following features please contact examples windows support windows user needs somebody care works windows write installation instructions format already exists need somebody give love new formats ready accept new output formats want create new format contact binary packaging osx windows users would really cool able download already packaged binary version", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "glue simple command line tool generate sprites using kind source images like png jpeg gif glue generate unique png file containing every source image map file including necessary information use", "pypi_keywords_clean": "glue sprites css"}, "svanoort/pyresttest": {"git_readme_clean": "pyresttest table contents status installation sample test examples installation use running simple test using json validation interactive mode verbose output goodies basic test set syntax import example url test custom http options special curl settings syntax limitations benchmarking metrics benchmark report formats installation project policies faq feedback contributions rest testing api microbenchmarking tool tests defined basic yaml json config files code needed minimal dependencies pycurl pyyaml optionally future making easy deploy supports mechanisms create full test scenarios returns exit codes failure slot automated configuration tools also supplies parseable logs logic written extensible python status new full python support alpha download install future give try apache license version changelog shows past present milestones show future roadmap changelog also show currently merged master branch released pypi yet pending installation tests across platforms installation pyresttest works linux mac python module installed first need install package sudo sudo alpine sudo mac worry platforms unsupported may get work installing pycurl pyyaml manually also include python guarantees though needed pycurl dependency may fail install pip rare cases may need intall pip install correctly easy install latest release pip sudo also install python pip installed want install first installed need install first sudo sudo mac os x homebrew included python installed releases occur every months want use unreleased features easy install source see change log feature status master branch tracks latest unit tested less stable releases branch tracks tested releases troubleshooting installation almost installation issues due problems pycurl pycurl native libcurl bindings easy check pycurl installed correctly returns correctly pycurl installed see importerror similar may also verify pyyaml installation well since fail install pip rare circumstances error installing pip caused libcurl installed recognized first install pycurl using native packages alternately try installing libcurl libraries virtualenv installation pycurl install pip sometimes issues manually copying working system pycurl installation may help sample test check apis accept operations smoketest application examples quickstart everyone starting point really good example create user tests shows use extraction responses templating different test types trying something fancy take look shows kinds templating variable uses shows read file using variable file path templating content pyresttest limited json example submitting form data whole folder example tests help get started use quickstart walks common use cases benchmarking section advanced features separate documentation templating generators content extraction complex validation extend pyresttest document ton examples bastienar created atom editor package pyresttest development thank running simple test run basic test github api using json validation simple set tests show json validation used check contents response test includes successful unsuccessful validation using github api help pyresttest help interactive mode test running interactive mode verbose output goodies simple templating http request bodies urls validators user variables generators create dummy data testing support easily writing sequential tests extract info one test use next import test sets test sets compose suites tests easily easy benchmarking convert test benchmark changing element type setting output options needed lightweight benchmarking ms overhead per request plans reduce future accurate benchmarking network measurements come native code libcurl test overhead alter optional interactive mode debugging demos basic test set syntax see tests defined yaml format top level test syntax elements url simple test fetches given url via get request checks good response code test fully defined test see benchmark fully defined benchmark see config configuration overall test configuration timeout common option import import another test set file repeat import example imports intended let create test suites run many independent isolated test scenarios test sets may also used create sample data perform cleanup long rely variables store information example one testset creates user set scenarios tests rely user id need start querying api get id url test timeout simple url test equivalent basic get test url also shows use timeout option testset config descrease default timeout seconds custom http options special curl settings advanced cases example ssl client certs sometimes want use custom curl settings corresponding option pyresttest easy test specify custom curl arguments optionname curl easy option removed example follow redirects times note option names validated validation done values syntax limitations whenever possible yaml configuration handler tries convert variable types needed responsible adults anything crazy play nicely handful elements use dynamic variables urls headers request bodies validators plans change next releases templating quite limited simple string subsitution plans improve next releases yet one caveat define element example url twice enclosing element last value used order preserve sanity use wins support natively done via custom extensions may available distant future benchmarking oh yes please pyresttest allows collect network performance metrics curl benchmarks based tests extend configuration elements test allowing configure rest call similarly however perform validation http response instead collect metrics custom configuration options specific benchmarks default unspecified run benchmark calls many times starting collect data allow jvm warmup caching etc default unspecified run benchmark many times collect data default none file name write benchmark output get overwritten run none given write terminal default csv unspecified format write results metrics metrics gather explained must specified benchmark nothing metrics two ways collect performance metrics raw data aggregated stats metric may yield raw data plus one aggregate values raw data returns array values one benchmark run aggregates runs reduction function return single value entire benchmark run median average etc return raw data configuration element simply input metric name list values example return raw data total time size download values aggregates pretty straightforward mean arithmetic mean data normal harmonic mean data useful rates median median value middle sorted result set standard deviation values useful measuring consistent total sum total values given currently supported metrics listed subset curl getinfo variables variables explained curlinfo prefix removed documentation metrics benchmark report formats csv default report format csv ouput include benchmark name benchmark group benchmark failure count raw http failures raw data arrays table headers metric name sorted alphabetically aggregates table results format metricname result json data structured slightly differently samples installation pure install easy build install rpm building rpm installing rpm need install pyyaml pycurl manually python distutils ca translate python dependencies rpm packages gotcha python distutils add dependency major python version means ca build rpm system python python system building rpm rhel need install work project policies pyresttest uses github flow master branch integration branch mature features releases cut periodically master every months generally often breaking bugs present released pypi feature development done feature branches merged master pr tested validated continuous integration jenkins branch tracks last release use want run pyresttest source changelog show past releases features merged master next release released testing tested ubuntu centos plus debian wheezy python releases occur every months pypi features ready go pyresttest uses semantic versioning important pyresttest makes strong effort maintain yaml format since extension method signatures maintained much possible however internal python implementations subject change major version releases etc may introduce breaking api changes really darned good reason another way feedback contributions welcome feedback including pull requests reported issues etc new contributors whole set issues labelled help wanted excellent starting points offer contribution instructions set dev environment pyresttest see pull requests get easily merged please include unit tests functional tests appropriate verify passes include documentation appropriate attempt adhere style guidelines project style bear mind largely effort moment response times vary said every feature request gets heard even takes reasonable features get incorporated fork main repo check back periodically may discover next release includes something meet needs faq tests written environment python sole primary language totally tests want extensions provide stable api adding complex functionality python modules imported used libraries gotcha project still young internal implementation may change often much yaml features yaml xml extremely verbose many gotchas parsing use json tests subset yaml see example yaml tends concise natural easy write three options load tests separate niche already many excellent tools fill adding load testing features would greatly increase complexity form might come eventually use pycurl requests maybe eventually pyresttest needs features pycurl benchmarking benefits performance however may eventually abstract core testing features away allow execution", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "python restful api testing microbenchmarking tool documentation", "pypi_keywords_clean": "rest web http testing"}, "DanielJDufour/date-extractor": {"git_readme_clean": "helps extract dates text installation use returning precision features languages supported arabic english french sorani kurdish turkish testing test package run using python may need run following test versions works python users use mind sharing let us know note readme helpful potential users see people using", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "helps extract dates text installation use returning precision features languages supported arabic english french sorani kurdish turkish testing test package run using python may need run following test versions works python users use mind sharing let us know note readme helpful potential users see people using", "pypi_keywords_clean": "data datetime extraction python tagging"}, "/labyrinth": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "labyrinth labyrinth maze like game created project uwpce python certificate program version set complete python package", "pypi_keywords_clean": ""}, "/pygal": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "", "pypi_keywords_clean": "svg"}, "csparpa/pyowm": {"git_readme_clean": "pyowm python wrapper around openweathermap web apis pyowm client python wrapper library openweathermap owm web apis allows quick easy consumption owm data python applications via simple object model fashion pyowm integrate code following openweathermap web apis weather api providing current weather data weather forecasts weather history agro api providing soil data satellite imagery search download air pollution api providing data co uv index api providing data ultraviolet exposition stations api allowing create manage meteostation publish local weather measurements weather alerts api allowing set triggers weather conditions areas poll spawned alerts image tiles several map layers provided owm pyowm runs python python watch python eventually dropped check details pyowm also integrates django models installation install ease lot alternatives setuptools windows installers common package managers yaourt arch linux opensuse eager fetch latest updates pyowm install development trunk usage api key openweathermap apis need valid api key allow responses pyowm wo work provide one stands free paid pro subscription plans signup free api key owm website please notice free api subscription plan subject requests throttling examples simple example pyowm weather api free owm api key example using paid owm api key documentation library software api documentation available read docs release changelog contributing contributors coding testing packaging reporting issues welcome see official documentation website details file quick primer community join pyowm public slack team signing cool projects use pyowm references openweathermap website openweathermap web api docs license mit license", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "pyowm client python wrapper library openweathermap web apis allows quick easy consumption owm data python applications via simple object model fashion", "pypi_keywords_clean": "openweathermap web api client weather forecast uv alerting owm pollution meteostation agro agriculture"}, "pyexcel-renderers/pyexcel-handsontable": {"git_readme_clean": "let focus data instead file formats image target image target image target image target image target image target support project company embedded pyexcel components revenue generating product please support maintain project develop individual welcome support however long feel like backer receive issues get prioritized would like become patreon financial support able invest little bit time coding documentation writing interesting posts known constraints fonts colors charts supported introduction rendering plugin renders web page long browser could view data however please note library aim replace current excel softwares micorsoft office aims extends capability python viewing plain data main features transform excel sheets excel alike html file embed excel sheets web page show data like excel jupyter notebook added one liner use pyexcel python alternatively use library pyexcel cli module please remember give file suffix always triggers plugin pyexcel screenshots view html image view jupyter notebook image installation install via pip bash clone install bash development guide development steps code changes git clone cd upgrade setup tools pip needed development testing pip install upgrade setuptools pip install relevant development requirements pip install file exists pip install pip install finished changes please provide test case relevant documentation update note test contribution although used code testing adviable unit tests put tests incorporated make sure code examples documentation remain valid across different development releases systems please launch tests like windows systems please issue command update test environment update documentation additional steps required pip install moban git clone generic setup git clone commons make changes directory issue command many information shared across pyexcel projects developer guide license info etc stored project stores specific meta data library acceptance criteria test cases written code lines tested passes travis ci builds fair amount documentation change complex please update please add agree new bsd license contribution update styles control look feel frame order view changes file need compile moban install sequence commands please open demo directory license new bsd license", "git_description_clean": "pyexcel plugin render data handsontable html pages", "git_keywords_clean": "html handsontable", "pypi_description_clean": "let focus data instead file formats image target image target image target image target image target image target support project company embedded pyexcel components revenue generating product please support maintain project develop individual welcome support however long feel like backer receive issues get prioritized would like become patreon financial support able invest little bit time coding documentation writing interesting posts known constraints fonts colors charts supported introduction rendering plugin renders web page long browser could view data however please note library aim replace current excel softwares micorsoft office aims extends capability python viewing plain data main features transform excel sheets excel alike html file embed excel sheets web page show data like excel jupyter notebook added one liner use pyexcel python alternatively use library pyexcel cli module please remember give file suffix always triggers plugin pyexcel screenshots view html image view jupyter notebook image installation install via pip bash clone install bash development guide development steps code changes git clone cd upgrade setup tools pip needed development testing pip install upgrade setuptools pip install relevant development requirements pip install file exists pip install pip install finished changes please provide test case relevant documentation update note test contribution although used code testing adviable unit tests put tests incorporated make sure code examples documentation remain valid across different development releases systems please launch tests like windows systems please issue command update test environment update documentation additional steps required pip install moban git clone generic setup git clone commons make changes directory issue command many information shared across pyexcel projects developer guide license info etc stored project stores specific meta data library acceptance criteria test cases written code lines tested passes travis ci builds fair amount documentation change complex please update please add agree new bsd license contribution update styles control look feel frame order view changes file need compile moban install sequence commands please open demo directory license new bsd license change log updated keep access rendered handsontables pass custom handsontable configurations added support added initial release", "pypi_keywords_clean": "python"}, "/pytorch": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "tried install pytorch package named pytorch torch", "pypi_keywords_clean": ""}, "hakanzy/django-system-monitor": {"git_readme_clean": "simple system monitoring django admin panel features cpu usage memory usage disk usage partitions network usage top memory used processes viewing django superuser currently supports linux windows osx freebsd psutil supported requirements psutil screenshots pip install setup add authors hakan ozay contributors rafael car\u00edcio peter heise cihan okyay fatih erikli john sykora tuna vargi", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "", "pypi_keywords_clean": ""}, "nongiach/exall": {"git_readme_clean": "exall ease exception handling python except exall exception manager based exall separates code logic error handling reduces code duplication ease development examples exall easily creates rules associate exceptions callbacks using decorators exall without exall install callbacks encouraged create callbacks default callback output warning error exit hexpressoteam", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "", "pypi_keywords_clean": "exception"}, "/hookbox": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "", "pypi_keywords_clean": ""}, "/pysmt": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "pysmt library smt formulae manipulation solving pysmt makes working satisfiability modulo theory simple among others define formulae solver independent way simple inutitive way write simplifiers operators dump problems format solve using one native solvers wrapping complaint solver supported theories solvers pysmt provides methods define formula linear real arithmetic lra real difference logic rdl combination lira equalities uninterpreted functions euf bv arrays following solvers supported native apis mathsat yices cudd picosat boolector additionally use compliant solver pysmt assumes python bindings smt solver installed accessible pythonpath pysmt works python python wan na know visit", "pypi_keywords_clean": ""}, "googleapis/grpc-google-iam-admin-v1": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "grpc library library service repository", "pypi_keywords_clean": ""}, "celery/librabbitmq": {"git_readme_clean": "librabbitmq python amqp client using library version download code keywords rabbitmq amqp messaging librabbitmq python kombu celery contents local python bindings rabbitmq supported kombu celery installation install via pip install via downloading installing source download latest version install following using development version clone repository following install following examples using kombu producing consuming poll license software licensed see file top distribution directory full license text vim expandtab shiftround", "git_description_clean": "python bindings", "git_keywords_clean": "python c amqp library", "pypi_description_clean": "librabbitmq python amqp client using library version download code keywords rabbitmq amqp messaging librabbitmq python kombu celery contents local python bindings rabbitmq supported kombu celery installation install via pip install via downloading installing source download latest version install following using development version clone repository following install following examples using kombu producing consuming poll license software licensed see file top distribution directory full license text vim expandtab shiftround", "pypi_keywords_clean": ""}, "/scikits-cuda": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "", "pypi_keywords_clean": "cuda nvidia pycuda gpu"}, "rodluger/k2plr": {"git_readme_clean": "pythonic access data fork daniel package read image target image target image target", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "fork package custom functionality enables access raw light curves", "pypi_keywords_clean": ""}, "GoogleCloudPlatform/google-auth-httplib2": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "transport google auth library provides transport note lots problems lack threadsafety insecure usage tls using highly discouraged library intended help existing users migrate image target installing install using license apache see information license", "pypi_keywords_clean": "google auth oauth client"}, "Pythonity/icon-font-to-png": {"git_readme_clean": "icon font png python script library easy simple export icons web icon fonts font awesome octicons png images best part provided shell script also use functionality directly probably awesome python project also script backwards compatibility first iteration concept installation make sure required packages pillow installation pypi recommended os x reported install os x usage examples download latest font awesome list available icons export icons size export icons blue export icons blue using hex value use without css ttf arguments api use matter directly inside python project proper documentation code commented pretty straightforward use said feel free ask via email github issues anything unclear tests package tested help python see code coverage available coveralls run tests need run inside repository contributions package source code available github feel free use ask fork star report bugs fix suggest enhancements add functionality point mistakes thanks authors developed maintained pythonity group python enthusiasts love open source neat blog available hire original version micha\u0142 wojciechowski refactored pawe\u0142 adamczak", "git_description_clean": "python script library exporting icons icon fonts font awesome octicons png images", "git_keywords_clean": "python octicons", "pypi_description_clean": "icon font png python script library easy simple export icons web icon fonts font awesome octicons png images best part provided shell script also use functionality directly probably awesome python project also script backwards compatibility iteration concept installation make sure required packages pypi recommended code shell os x reported install os x usage examples download latest font awesome list available icons export icons size export icons blue export icons blue using hex value use without css ttf arguments api use matter directly inside python project proper documentation code commented pretty straightforward use said feel free ask via github issues github add issue anything unclear tests package tested help python see code coverage available run tests need run inside repository code shell contributions package source code available feel free use ask fork star report bugs fix suggest enhancements add functionality point mistakes thanks authors developed maintained original version refactored image target image target image target image target image target", "pypi_keywords_clean": "icon font export font awesome octicons"}, "/pyspotify": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "pyspotify pyspotify provides python interface online music streaming service pyspotify access music metadata search spotify library million tracks manage spotify playlists play music spotify python applications pyspotify use make pure python wrapper around official library works cpython well pypy known work linux os x windows support possible awaiting contributor interest knowledge maintain libspotify deprecation note may libspotify officially deprecated spotify longer actively maintained spotify published newer libraries intended android ios development well web apis access track metadata manage playlists though making apps spotify playback capabilities platform android ios currently alternative libspotify libspotify main way integrating spotify since today part numerous open source projects commercial applications including many receivers even cars guarantees one hope large deployment libspotify means library continue work spotify service long time future project resources irc image target alt latest pypi version image target alt number pypi downloads image target alt travis ci build status image target alt test coverage", "pypi_keywords_clean": ""}, "datamade/highered": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "", "pypi_keywords_clean": ""}, "/flask-rq2": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "image target alt documentation status image target alt test status image target alt test coverage status image target alt calver timely software versioning resources snip flask extension redis queue continuation spirit code many thanks inspiration providing shoulders stand installation console getting started quickly start using simply create instance python alternatively using pattern python later call create application object python snap information see read docs", "pypi_keywords_clean": ""}, "rafaelcaricio/tornado-pyvows": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "pyvows extensions tornado web framework", "pypi_keywords_clean": "testing vows test tdd"}, "blackleg/ree": {"git_readme_clean": "ree red el\u00e9ctrica de espa\u00f1a data package install example code output", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "ree red el\u00e9ctrica de espa\u00f1a data package install example code output", "pypi_keywords_clean": ""}, "/django-activitysync": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "django activity sync easy use social activity aggregator django projects used store display activity range social networks twitter reddit google reader etc unlike utilities accessing displaying activity separates rendering activity updating activity information stored database using django models providing great performance page requests updating activities happens django management command automated using utility like cron features currently supports following activity providers providers implemented using simple common interface making easy add support additional networks dependencies dependencies must meet use application twitter support depends google reader reddit support depend version installation clone add activitysync pythonpath configuration add activitysync add desired providers setting add provider settings dependent providers added ease use organizational purposes settings providers stored dictionary settings required providers sync database create needed models python syncdb south installed python migrate activitysync usage fetching creating activity items configuration completed run included management command fetch activities configured providers command print new activities command line activity items stored unique guid value command run often needed without worrying creating duplicate values production site command likely would added crontab scheduler run fairly often every minutes options available management command use option send email site admins controlled django admin setting newly added activities email sent new items python updateactivities use output items console actually create items database python updateactivities using activity items activity items accessed like model using django orm quick example getting published activity items fetched items default public hidden modifying item django admin site also provides template tag displaying items template tag pass object list values template project comes sample template used default use basis second template tag renders activity list along date headers unique day encountered reader", "pypi_keywords_clean": "django social activity application twitter reddit google reader"}, "idlesign/django-siteblocks": {"git_readme_clean": "image target alt lbc python image target image target image target image target image target reusable application django build blocks static dynamic data could used templates allows describe data clearly belong application project terms static dynamic blocks could rendered certain places site pages blocks addressed templates aliases two siteblock types supported static defined using django admin contrib linked certain urls allows different siteblock contents different urls dynamic ordinary python functions registered siteblocks returning contents allows complex logic build siteblock contents one siteblock one content associated rendered content chosen randomly documentation", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "image target alt lbc python image target image target image target image target image target reusable application django build blocks static dynamic data could used templates allows describe data clearly belong application project terms static dynamic blocks could rendered certain places site pages blocks addressed templates aliases two siteblock types supported static defined using django admin contrib linked certain urls allows different siteblock contents different urls dynamic ordinary python functions registered siteblocks returning contents allows complex logic build siteblock contents one siteblock one content associated rendered content chosen randomly documentation", "pypi_keywords_clean": ""}, "ikeikeikeike/tastypie-queryset-client-p3k": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "tastypie queryset client client provide operation similar django model api fork original project modified run python usage get count filter save delete setup documentation license mit license", "pypi_keywords_clean": "tastypie client django rest api"}, "mfogel/django-timezone-field": {"git_readme_clean": "image target image target image target django app providing database form fields timezone objects examples database field code python installation using add changelog support django add support python change default timezone names exclude underscores add support django add support python add wheel support support bytes db fields drop support django add support django drop support python add support python remove tests source distribution drop support django add support django various form field changed default list accepted timezones match db field behavior django compatibility added support formating kwarg addition previous format changed default list accepted timezones timezones db change old behavior restored specifying model definition initial release running tests install repository root run found bug file bug submit patch please head credits originally adapted full list contributors available", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "image target image target image target django app providing database form fields timezone objects examples database field code python installation using add changelog support django add support python change default timezone names exclude underscores add support django add support python add wheel support support bytes db fields drop support django add support django drop support python add support python remove tests source distribution drop support django add support django various form field changed default list accepted timezones match db field behavior django compatibility added support formating kwarg addition previous format changed default list accepted timezones timezones db change old behavior restored specifying model definition initial release running tests install repository root run found bug file bug submit patch please head credits originally adapted full list contributors available", "pypi_keywords_clean": ""}, "mrf345/flask-fontpicker": {"git_readme_clean": "flask extension google font picker makes adding customizing multiple font pickers simpler less time pip source setup inside flask app inside jinja template settings options accepted arguments passed function follow local source default extension load plugin remote cdn although configure locally passing list files fontpicker module like order items list passed importance auto detected via file extension credit fontpicker web google font picker extension", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "flask extension add javascript web template makes adding configuring multiple font pickers time much easier less time consuming", "pypi_keywords_clean": "flask"}, "edwardgeorge/virtualenv-clone": {"git_readme_clean": "virtualenv cloning script script cloning virtualenv virtualenv provides way make virtualenv relocatable could copied wanted however making virtualenv relocatable way breaks isolation virtualenv well aspects come relative paths shebangs may undesirable also rewriting seem work intended attempts overcome issues provide way easily clone existing virtualenv performs following copies dir updates hardcoded variable activate script new repo location touch updates shebangs various scripts bin new python pointed old python version numbering retained also change shebangs absolute though functionality exposed present checks cloned virtualenv paths old environment finds link files within located new environment makes sure absolute paths old environment updated new environment finally double checks fail still paths old environment present note script requires python", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "virtualenv cloning script script cloning virtualenv virtualenv provides way make virtualenv relocatable could copied wanted however making virtualenv relocatable way breaks isolation virtualenv well aspects come relative paths shebangs may undesirable also rewriting seem work intended attempts overcome issues provide way easily clone existing virtualenv performs following copies dir updates hardcoded variable activate script new repo location touch updates shebangs various scripts bin new python pointed old python version numbering retained also change shebangs absolute though functionality exposed present checks cloned virtualenv paths old environment finds link files within located new environment makes sure absolute paths old environment updated new environment finally double checks fail still paths old environment present note script requires python", "pypi_keywords_clean": ""}, "Ch00k/ffmpy": {"git_readme_clean": "image target alt latest version image target alt image target alt documentation status ffmpy ffmpy simplystic command line wrapper implements pythonic interface ffmpeg command line compilation uses python module execute compiled command line installation guessed pip install ffmpy quick example code python import ffmpy ff none none take file current directory input change video container avi without changing video parameters create new output file current directory documentation see section usage examples license ffmpy licensed terms mit license", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "image target alt latest version image target alt image target alt documentation status ffmpy ffmpy simplystic command line wrapper implements pythonic interface ffmpeg command line compilation uses python module execute compiled command line installation guessed pip install ffmpy quick example code python import ffmpy ff none none take file current directory input change video container avi without changing video parameters create new output file current directory documentation see section usage examples", "pypi_keywords_clean": "ffmpeg ffprobe wrapper audio video transcoding"}, "ContinuumIO/into": {"git_readme_clean": "odo image target image target data migration python example odo migrates data different containers python odo import odo odo list operates small containers large containers python odo pass host table metadata postgresql host odo leverages existing python ecosystem example uses sql interation interaction method odo migrates data using network small data conversion functions type pairs network image alt odo conversions node container type like directed edge function transforms appends one container onto another annotate relative costs network approach allows select shortest path two types thank performance reasons functions often leverage systems like numpy arrays native loading functions odo dependent python iterators network approach also robust libraries go missing runtime errors occur work around holes find new paths network approach extensible easy write small functions register overall graph following example showing convert python odo import convert def df return decorate functions target source types well relative cost decoration establishes contract underlying function must fulfill case fast method similar functions exist add existing data uri resolution transform dataset new container add dataset onto existing container given uri find appropriate data resource call one based inputs finally also aware containers must reside memory graph nodes robust datasets transformations two datasets operate subgraph red nodes license new bsd see history odo factored project image target image target alt documentation status", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "data migration python example migrates data different containers python import list operates small containers large containers python pass host table metadata postgresql host leverages existing python ecosystem example uses sql interation interaction method migrates data using network small data conersion functions type pairs network image alt conversions node container type like directed edge function transforms appends one container onto another annotate relative costs network approach allows select shortest path two types thank performance reasons functions often leverage systems like numpy arrays native loading functions dependent python iterators network approach also robust libraries go missing runtime errors occur work around holes find new paths network approach extensible easy write small functions register overall graph following example showing convert python import convert def df return decorate functions target source types well relative cost decoration establishes contract underlying function must fulfill case fast method similar functions exist add existing data uri resolution transform dataset new container add dataset onto existing container given uri find appropriate data resource call one based inputs finally also aware containers must reside memory graph nodes robust datasets transformations two datasets operate subgraph red nodes license new bsd see history factored project image target image target alt documentation status", "pypi_keywords_clean": "data conversion sql blaze"}, "/clubsandwich": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "clubsandwich roguelike framework python using imagine want write roguelike want roll framework scratch want use python mature option kitchen sink roguelike development utilities like terminal graphics pathfinding random numbers noise generators config file parsers data structures pretty heavy docs great icky c api covers lot things need roguelike help much ui state management sounds like decent tradeoff go try happy another library handles terminal graphics tiny understandable clubsandwich builds bearlibterminal blt add nice api state management easy ui helpful stuff features python bearlibterminal course installation package yet pypi heavy development expect reasonable api stability code python image image feature examples event loop games one screen simple director object manages really obvious way code python geometry library super simple wrapper around conveniently read state values code python transform stack sophisticated short demo code scene first screenshot code python script runner install clubsandwich adds script called path script one simple thing runs command command exits runs repeats process useful writing games want keep switching back terminal run script using quit game whenever make change start back try demo script like code sh", "pypi_keywords_clean": "bearlibterminal roguelike"}, "hamelsmu/ktext": {"git_readme_clean": "utilities text deep learning keras performs common steps associated deep learning cleaning tokenization padding truncation importantly allows perform steps using threading parallel think might benefit parallelization consider using text preprocessing utilities keras instead helps following cleaning may want clean data remove items like phone numbers email addresses replace generic tags remove html step optional help remove noise data tokenization take raw string ex hello world tokenize looks like generating vocabulary token index mapping map unique token corpus integer value usually stored dictionary example might valid mapping tokens integers usually want reserve integer rare unseen words uses another integer padding uses set threshold rare words see documentation truncating padding necessary much easier documents length way accomplish truncating padding documents desired length pad document documents desired length truncated utility allows build histogram document lengths choose sensible document length corpus utility accomplishes using threading speed sklearn style interfaces provided directly compatible sklearn yet pull requests comments welcome note utility useful data fit memory single node otherwise data fit memory consider using distributing computing paradigms hive spark dask documentation notebook contains tutorial use library installation pip install ktext", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "", "pypi_keywords_clean": ""}, "matthew-brett/delocate": {"git_readme_clean": "image target delocate osx utilities find dynamic libraries imported python extensions copy needed dynamic libraries directory within package update osx cause code load copies libraries provides scripts show libraries tree depends copy libraries tree depends tree relink rewrite wheel copied relinked library dependencies wheel tree tool linux similar based warning problem let say built wheel somewhere linking dynamic libraries elsewhere machine ca distribute others may libraries analyze dependencies scipy wheel default include libraries see output tells scipy picked dynamic libraries homebrew installation well system libs warning get listing files depending libraries using flag solution fix like flag tells output new wheel directory instead overwriting old wheel verbose tells case made new directory wheel zipfile named copied library dependencies outside osx system trees directory patched python extensions wheel use copies instead looking check links confirm system dylibs others moved wheel tree makes wheel likely work another machine version gfortran installed example checking required architectures current python osx system python dual intel architecture binaries example means wheels built python system python also versions python extensions libraries easy link python extensions single architecture libraries mistake therefore get single architecture extensions libraries fact scipy wheel one example inadvertently linked homebrew libraries check use flag intel argument requires dual architecture extensions libraries see extensions fault adding verbose flag need rebuild wheel link libraries troubleshooting running sister command may get errors like happens one libraries gives library dependency relative path example let say file wheel output first line means expects find exactly path current working directory ran executable output something like set path library linker using linked library bad case give something like first line linker picked linking job fix build process install name id problem specific need make sure load without current working directory builds may want check code see released bsd license see file source distribution kindly tests code automatically python latest released version support please put issues name id", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "image target delocate osx utilities find dynamic libraries imported python extensions copy needed dynamic libraries directory within package update osx cause code load copies libraries provides scripts show libraries tree depends copy libraries tree depends tree relink rewrite wheel copied relinked library dependencies wheel tree tool linux similar based warning problem let say built wheel somewhere linking dynamic libraries elsewhere machine ca distribute others may libraries analyze dependencies scipy wheel default include libraries see output tells scipy picked dynamic libraries homebrew installation well system libs warning get listing files depending libraries using flag solution fix like flag tells output new wheel directory instead overwriting old wheel verbose tells case made new directory wheel zipfile named copied library dependencies outside osx system trees directory patched python extensions wheel use copies instead looking check links confirm system dylibs others moved wheel tree makes wheel likely work another machine version gfortran installed example checking required architectures current python osx system python dual intel architecture binaries example means wheels built python system python also versions python extensions libraries easy link python extensions single architecture libraries mistake therefore get single architecture extensions libraries fact scipy wheel one example inadvertently linked homebrew libraries check use flag intel argument requires dual architecture extensions libraries see extensions fault adding verbose flag need rebuild wheel link libraries troubleshooting running sister command may get errors like happens one libraries gives library dependency relative path example let say file wheel output first line means expects find exactly path current working directory ran executable output something like set path library linker using linked library bad case give something like first line linker picked linking job fix build process install name id problem specific need make sure load without current working directory builds may want check code see released bsd license see file source distribution kindly tests code automatically python latest released version support please put issues name id", "pypi_keywords_clean": ""}, "sigmaris/python-gssapi": {"git_readme_clean": "note newer project superseded one please use package suitable needs project unlikely developed attempt interface gssapi python project licensed terms mit license see documentation documentation package available support uses cffi interface c gssapi library install without problems python encounter bugs please open issue github issue tracker", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "important note newer project superseded one please use package suitable needs project unlikely developed python binding generic security service application program interface gssapi gssapi provides uniform interface security services applications use without worry implementation details underlying mechanisms commonly used mechanism kerberos package provides easy way use kerberos authentication security python code gssapi version specified c language bindings package based specified goals goals package provide gssapi wrapper pythonic compatible python cpython pypy covering full range features gssapi package implemented using cffi compatibility pypy also compatible tested python package also covers full scope gssapi features including delegating credentials selection different mechanisms different name types mics channel bindings anonymous authentication contrast kerberos gssapi packages require user manual memory management permit memory leaks memory associated objects package freed automatically objects python documentation documentation available source code issue tracking source code hosted issues package filed github project", "pypi_keywords_clean": "gssapi kerberos"}, "mixmastamyk/console": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "tonight gon na party like console yet another package makes easy generate inline codes used display colors character styles terminals emulators well functionality clearing screens moving cursors setting title bars detecting capabilities bit comprehensive work hello world adding little color console might look like python fyi string represents ascii escape character decimal hex command turns text green back default color need worry printing supporting terminal python might look like note python convenient object note ends styles colors example resets background default color need responsibility however one may use call form instead later wait shitload crapton lot bitte palettes break three main categories unleash inner basic original named colors extended indexed colors true million colors consisting rgb specified colors colors colors mentioned original palette webcolor palettes may accessed directly name python additional palettes accessed via prefix letter number digits name specify color python underscores optional choose depending whether brevity readability important assorted true color forms useful choose one explicitly without ambiguity webcolors colors unrecognized color name index result console palette entry objects meant highly composable useful multiple ways example might like create compound styles use also called functions desired mixin styles added well callable form also automatically resets styles defaults end line string avoid breaking pagers tasks longer need managed manually python palette objects combined together done list codes rendered kept ice final output string meaning wo redundant escape sequences output sirree python styles built fly well python rubric templating build templates call palette entry placeholder strings instead text python python template formats problem either console lightweight perhaps like string used tight loop performance reasons simply use finalize output use loop palette entries work well python demos tests series positively demos haha ok maybe may run pytest installed tests run install folder shell makefile github details topics contributions could use help windows macos daily driver tux racer legalese copyright mike miller released lgpl version enterprise pricing meellion dollars sell one copy", "pypi_keywords_clean": "ansi color detection escape terminal console sequence cursor style screen shell xterm"}, "Unidata/metpy": {"git_readme_clean": "metpy image target alt license image target alt pypi package image target alt pypi downloads image target alt conda package image target alt conda downloads image target alt travis build status image target alt appveyor build status image target alt code coverage status image target alt codacy issues image target alt code climate image target alt scrutinizer code quality image target alt latest docs image target alt gitter image target alt prs welcome metpy collection tools python reading visualizing performing calculations weather data metpy follows version number current version implies metpy apis application programming interfaces still evolving wo break things fun many things still changing work design issues also version change release new features make release bug fixes support python currently support python note dropping support python fall see information need help need help using metpy found issue feature request checkout important links source code repository html documentation unidata python gallery issue tracker metpy tagged questions stack overflow gitter chat room say thanks dependencies required packages numpy scipy matplotlib pint python requires package backport standard library enum module also optional dependency pyproj library geographic projections used cdm interface see information code conduct want everyone feel welcome contribute metpy participate discussions spirit please look contributing imposter syndrome disclaimer want help really may little voice inside head telling ready open source contributor skills nearly good enough contribute could possibly offer project like one assure little voice head wrong write code contribute code open source contributing open source projects fantastic way advance one coding skills writing perfect code measure good developer would disqualify us trying create something making mistakes learning mistakes improve happy help others learn open source contributor mean writing code either help writing documentation tests even giving feedback project yes includes giving feedback contribution process contributions may valuable project whole coming project fresh eyes see errors assumptions seasoned contributors glossed information please read see philosophy space metpy aims gempak maybe ncl functionality way plugs easily existing scientific python ecosystem numpy scipy matplotlib take average gempak script weather map need read data calculate derived field show one benefits hoped achieve gempak make easier use routines meteorological python application means making easy pull lcl calculation use data code metpy also prides maintenance easily manageable intended audience gempak researchers educators one wanting script weather analysis even scripting python meteorology tools hoped able benefit metpy conversely hoped meteorological equivalent audience", "git_description_clean": "metpy collection tools python reading visualizing performing calculations weather data", "git_keywords_clean": "python meteorology weather plotting hodograph", "pypi_description_clean": "space metpy aims gempak maybe ncl functionality way plugs easily existing scientific python ecosystem numpy scipy matplotlib", "pypi_keywords_clean": "meteorology weather"}, "/uw-tools": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "collection python scripts proven useful reused files moved original location project trying make sure compatible python", "pypi_keywords_clean": "unfoldingword python tools"}, "/repoze-what-quickstart": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "quickstart plugin extras plugin plugin allows take advantage rather simple usual authentication authorization setup users data groups permissions used application stored sqlalchemy database put simply configures one go authentication authorization system working quickly hence name", "pypi_keywords_clean": "web application wsgi server sql sqlalchemy elixir authentication authorization repoze"}, "eliangcs/bisheng": {"git_readme_clean": "bisheng image target image target image target set utility functions processing chinese text current features include add spaces characters halfwidth characters convert traditional chinese simplified chinese way around installation usage add spaces chinese characters halfwidth characters specify characters want exclude chinese conversion", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "bisheng image target image target image target set utility functions processing chinese text current features include add spaces characters halfwidth characters convert traditional chinese simplified chinese way around installation usage add spaces chinese characters halfwidth characters specify characters want exclude chinese convertion", "pypi_keywords_clean": ""}, "/nxt-python": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "package controlling lego nxt robot using python programming language communicate using either usb bluetooth available gnu gpl license based releases halted may requirements installation see getting started scripts afraid experiment trouble something may find solution docstrings example help even source code especially digital sensors tried put important stuff first would good idea read whole section case read way asking help thanks designed series work version trying get old program work likely needs series release downloaded downloads page googlecode new projects use series release hint one due new features api improvements converting old projects somewhat difficult officially supported though always welcome ask help support number sensors tested due lack hardware started project test code going slow still ca test everything problem digital sensor see troubleshooting guide forget report trouble synchronized motor support extensively tested accuracy seems mostly work well accuracy braking function closeness two motors given formal scientific assessment tested may work custom nxt firmware versions know means need worry however firmware supports standard lego communications protocol everything less work tested bricks using lego firmware version compatible protocol version used official firmwares also reported working lejos co svn arduino directory svn checkout included release packages contains digital sensor unit test system called nxtduemu intended developers advanced users looking experiment sensors digital sensor framework classes see info usage instructions specific stability status redone somewhat appear work well usb communication system linux stable extensively tested windows somewhat tested seems work pretty well mac users problems bluetooth communication system linux stable well tested pybluez lightblue windows stable working last checked mac users problems internet communications system seems work part occasionally hiccups fantom communications system linux fantom driver supported windows tested mac tested usb interface working bluetooth working tested working revamped logic new code stable except synchronized motor support experimental stage extensively tested code specific particular sensor working great half sensor classes last reported working rest knowlege tested written blindly manuacturers specifications problem one gon na cry contact thanks troubleshooting digital sensors read unless problems getting errors strange behavor incorrect values digital sensor chances bug code follow instructions try find wrong right sensors make sure things right somewhere heading class sensorname basedigitalsensor read comments instructions certain things get still problem either go ahead report continue try find fix problem report report would nice python experience required beyond point sure includes table registers instructions using errors problem bit python experience maybe googling needed strange behavior sensors incorrect values says done inconsistency try fix cause incorrect register number type solution verify address number string struct format string verify address use spec verify struct format need read experience struct read spec sensor determine given value read start sample method read checking problems go seems right go back chunk near top class make sure correct struct format string used common problem values plus minus incorrect setting fixed switching case upper lower letter string problems could include wrong size b h l used two latter ones wrong byte order always common sense required", "pypi_keywords_clean": ""}, "tcalmant/javaobj-py3": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "image target alt latest version image target alt license image target alt status image target alt coveralls status python library provides functions reading writing writing wip currently java objects serialized deserialized form object representation standard data interchange format java world module exposes api familiar users standard library modules repository project fork volodymyr buell originally hosted fork intends work python python compatibility warning object transformer version notion object transformer original project replaced object creator object creator called deserialization allows store reference converted object deserializing avoids mismatch referenced object transformed one compatibility warning bytes arrays version bytes arrays loaded object instead array integers features java object instance unmarshaling java classes unmarshaling primitive values unmarshaling automatic conversion java collections python ones etc basic marshalling simple java objects requirements python python maven building test data serialized objects skip plan run usage unmarshalling java serialised object python use unmarshaller object directly python", "pypi_keywords_clean": "python java marshalling serialization"}, "/pyalgotrade": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "python library backtesting stock trading strategies", "pypi_keywords_clean": ""}, "Stranger6667/postmarker": {"git_readme_clean": "postmarker image target alt build status image target alt coverage status image target alt documentation status image target alt latest pypi version python client library installation postmarker obtained usage example note attributes classes provided without transformation snake case want introduce new names existing entities send single email python send batch python setup email python lot features available check documentation support sending python email instances bounces domains messages templates sender signatures status stats server api django email backend tornado helper spam check api wrappers bounce inbound open delivery webhooks documentation view documentation online look directory repository python support postmarker supports python pypy jython thanks many thanks reviews advices", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "postmarker image target alt build status image target alt coverage status image target alt documentation status image target alt latest pypi version python client library installation postmarker obtained usage example note attributes classes provided without transformation snake case want introduce new names existing entities send single email python send batch python setup email python lot features available check documentation support sending python email instances bounces domains messages templates sender signatures status stats server api django email backend tornado helper spam check api wrappers bounce inbound open delivery webhooks documentation view documentation online look directory repository python support postmarker supports python pypy jython thanks many thanks reviews advices", "pypi_keywords_clean": "postmark api client email"}, "taichino/jcconv": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "jcconv japanese characters converter interconvert hiragana katakana kana module also treat number alphabet since functions added check string consists characters specified impotant current version works encoding simple example usage followings", "pypi_keywords_clean": "japanese converter hiragana katakana kana"}, "tiarno/plastex": {"git_readme_clean": "read github page plastex project installation package done like python package see install file details plastex installed use utility called plastex like latex pdflatex example latex file called simple run convert xhtml default renderer course many options control execution plastex simply type plastex command line without options arguments see full list options also possible write utilities leverage power plastex framework fact essence plastex command written one line code including python import commands plastex really much converter though see documentation complete view capable", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "plastex latex document processing framework written entirely python currently comes bundled renderers xhtml docbook man pages plain text well way simply dump document generic form xml renderers added well planned future releases", "pypi_keywords_clean": "html latex xml"}, "thoas/python-leetchi": {"git_readme_clean": "client library work api formely installation requires requests pycrypto work install simply inspiration data model highly inspired documentation documentation usage examples see wild library developed need", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "client library work api formely installation requires requests pycrypto work install simply inspiration data model highly inspired documentation documentation usage examples see wild library developed need add keep alive feature requests store http session thanks st\u00e9phane planquart improve error logging thanks st\u00e9phane planquart change way handle status codes errors reverse orders returns pure objects status mostly ok add missing property add property translate format pure date python object add detailpaymentcard resource onetoone contribution retrieve payment card information fix amountfield amount none add json response accessible apierror decodeerror exceptions add immediate recurrent contribution thanks nidusfr add contribution thanks splanquart port python thanks ebewe add beneficiary attribute withdrawal resource add beneficiary resource required save method instance retrieved fix inherited models representations add foreign keys provide way override urls processing api requests add onetoonefield strongauthentication add signal laps timing sent signal add support date safe converter rewrite exceptions handling catch connectionerror connection reset peer add datefield attribute add choices default attributes field class add model inheritance apiobjectbase fix typo withdrawalcontribution added withdrawalcontribution resource signals handling via blinker added signal add callback request finished added signal add callback request starting added signal add callback new resource created added signal add callback new resource created added culture parameter contribution specify language used payment added time beginning end requests logger removed imports use modules instead added type attribute contribution resource set type transacti added better support handling errors added new resources paymentcard transferrefund refund added host optional parameter leetchiapi object fix bugs reuse timestamp generate host auth signature added amountfield descriptor convert cts initial release", "pypi_keywords_clean": "leetchi api rest users wallets contributions"}, "gdub/simpleldap": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "small wrapper around library provides pythonic interface ldap server connections ldap objects common get search operations installation install using pip examples quick easy example using object also used context manager common method authenticating users connect ldap server using service attempt bind operation using credentials dn password method makes simple note method perform unbind bind using original connection credentials therefore actions following successful call performed authenticated user ldap also offers feature compare attribute value given string occasionally efficient expressive grabbing entire object ldap store offers method feature", "pypi_keywords_clean": "ldap simple simpleldap"}, "/messytables": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "tabular data published web often well formatted structured messytables tries detect fix errors data typical examples include finding header table explanations text fragments first rows table guessing type columns csv data library provides data structures heuristics fix problems read wide number different tabular abominations see full documentation", "pypi_keywords_clean": ""}, "/twitter": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "python twitter tools minimalist twitter api python python api twitter everyone favorite web status updater people go also included twitter tool getting tweets setting tweet safety security favorite shell irc bot announce twitter updates irc channel information installing package import package run run tool help twitter tool tool lets awesome things view tweets recent replies tweets lists view public timeline follow unfollow leave friends various output formats tweet information bottom line type receive tweets twitterbot irc bot irc bot associated twitter account either account account create bot bot announces tweets friends following made follow leave friends irc commands simple tool dumps public tweets given user simple text format useful get complete offsite backup tweets run read instructions log tweets posted user since started posting print list followers user users user follows programming twitter api classes classes key building applications class minimalist yet fully featured twitter api class get restful data accessing members class result decoded python objects lists dicts twitter api documented list accessible functions listed examples code python searching twitter code python retrying reaching api rate limit simply create instance argument http error codes cause retry last request integer defines maximum number retry attempts using data returned twitter api calls return decoded json converted bunch python lists dicts ints strings example code python getting raw xml data prefer get twitter data xml format pass object instantiate code python output parsed way raw string xml class object interface twitter stream api used pretty much class except result calling method iterator yields objects decoded stream example code python per default object uses want use one specify url manually note require proper access streams direct messages needs read write direct messages permission following example demonstrates retrieve new direct messages user stream code python iterator tcp connection breaks connection breaks iterator yields raises iterated similarly stream produce heartbeats seconds iterator yields raises iterated parameter controls maximum time yields nonzero iterator yield either stream data within timeout period useful want program stuff waiting tweets parameter sets stream fully mode iterator always yields immediately returns stream data note supercedes argument also set use mode potentially lead cpu usage twitter objects response twitter request behaves like list string depending requested format interesting attributes gives access response headers instance use retrieve header authentication authenticate twitter three ways noauth oauth get classes learn use oauth probably useful working oauth visit twitter developer page create new application get users run application authenticate app twitter account http calls twitter required please see module see done making app use function directly performing oauth dance gets oauth token oauth secret authenticate user twitter save later user oauth dance utility methods read write oauth key values values stored strings file terribly exciting finally use authenticator connect twitter code goes like code python working twitter supports flow certain api endpoints authenticator supports flow right authenticate visit twitter developer page create new application get exchange bearer token using function finally use authenticator bearer token connect twitter code goes like code python license python twitter tools released mit license image target image target", "pypi_keywords_clean": "twitter irc tools web"}}