{"aflc/editdistance": {"git_readme_clean": "editdistance fast implementation edit distance levenshtein distance library simply implements cython algorithm used library proposed binary wheels thanks binary wheels linux mac os windows install install via pip bash usage quite simple python simple benchmark ipython tried several libraries python python distance object libraries support strings sometimes type objects list strings words support iterable requires hashable object python object hash provide method object instances enjoy license released mit license", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "", "pypi_keywords_clean": ""}, "omerucel/basitapi": {"git_readme_clean": "basitapi restful api olu\u015fturman\u0131zda size yard\u0131mc\u0131 olan basit bir k\u00fct\u00fcphane s\u0131n\u0131f temelli view yap\u0131s\u0131 \u00fczerine kurulu bir restful olmas\u0131 gereken baz\u0131 temel \u00f6zellikleri sunar ba\u015fka da bir i\u015fe kar\u0131\u015fmaz sundu\u011fu baz\u0131 temel \u00f6zellikler ba\u011flant\u0131daki method parametresi ile ba\u015fl\u0131\u011f\u0131n\u0131n ezilmesi baz\u0131 istemciler sadece baz\u0131 metodlar\u0131 g\u00f6ndermekle k\u0131s\u0131tland\u0131r\u0131labilirler bu t\u00fcrl\u00fc bir durumda do\u011fru \u00e7al\u0131\u015fabilmesi i\u00e7in ba\u011flant\u0131 i\u00e7inde method isimli parametreyi kullanabilirsiniz bu parametre ile ezilir g\u00f6nderdi\u011finiz method parametresindeki de\u011fere g\u00f6re i\u015flemler y\u00fcr\u00fct\u00fcl\u00fcr zaman http kodu ile d\u00f6n\u00fc\u015f baz\u0131 istemciler sadece baz\u0131 hata kodlar\u0131na yan\u0131t verebilirler basitapi bu t\u00fcr durumlar i\u00e7in parametresine destek vermekte bu parametre de\u011feri olarak g\u00f6nderildi\u011finde durumu ne olursa olsun t\u00fcm yan\u0131tlar kodu ile g\u00f6nderilmekte yan\u0131t format\u0131 hem accept ba\u015fl\u0131k bilgisine hem de ba\u011flant\u0131 dosya son ekine g\u00f6re yan\u0131t format\u0131 ayarlanabilmekte kurulum pypi \u00fczerinden kurulum i\u00e7in a\u015fa\u011f\u0131daki komutu kullanabilirsiniz github \u00fczerinden kurulum i\u00e7in a\u015fa\u011f\u0131daki komutu kullanabilirsiniz kullan\u0131m ba\u011flant\u0131 dosya son ekine g\u00f6re yan\u0131t format\u0131n\u0131 ayarlamak istemiyorsan\u0131z ba\u011flant\u0131lar\u0131n\u0131z\u0131 ile tekrar formatlaman\u0131za gerek yok", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "basitapi restful api olu\u015fturman\u0131zda size yard\u0131mc\u0131 olan basit bir k\u00fct\u00fcphane s\u0131n\u0131f temelli view yap\u0131s\u0131 \u00fczerine kurulu bir restful olmas\u0131 gereken baz\u0131 temel \u00f6zellikleri sunar ba\u015fka da bir i\u015fe kar\u0131\u015fmaz sundu\u011fu baz\u0131 temel \u00f6zellikler ba\u011flant\u0131daki method parametresi ile ba\u015fl\u0131\u011f\u0131n\u0131n ezilmesi baz\u0131 istemciler sadece baz\u0131 metodlar\u0131 g\u00f6ndermekle k\u0131s\u0131tland\u0131r\u0131labilirler bu t\u00fcrl\u00fc bir durumda do\u011fru \u00e7al\u0131\u015fabilmesi i\u00e7in ba\u011flant\u0131 i\u00e7inde method isimli parametreyi kullanabilirsiniz bu parametre ile ezilir g\u00f6nderdi\u011finiz method parametresindeki de\u011fere g\u00f6re i\u015flemler y\u00fcr\u00fct\u00fcl\u00fcr zaman http kodu ile d\u00f6n\u00fc\u015f baz\u0131 istemciler sadece baz\u0131 hata kodlar\u0131na yan\u0131t verebilirler basitapi bu t\u00fcr durumlar i\u00e7in parametresine destek vermekte bu parametre de\u011feri olarak g\u00f6nderildi\u011finde durumu ne olursa olsun t\u00fcm yan\u0131tlar kodu ile g\u00f6nderilmekte yan\u0131t format\u0131 hem accept ba\u015fl\u0131k bilgisine hem de ba\u011flant\u0131 dosya son ekine g\u00f6re yan\u0131t format\u0131 ayarlanabilmekte kurulum pypi \u00fczerinden kurulum i\u00e7in a\u015fa\u011f\u0131daki komutu kullanabilirsiniz github \u00fczerinden kurulum i\u00e7in a\u015fa\u011f\u0131daki komutu kullanabilirsiniz kullan\u0131m ba\u011flant\u0131 dosya son ekine g\u00f6re yan\u0131t format\u0131n\u0131 ayarlamak istemiyorsan\u0131z ba\u011flant\u0131lar\u0131n\u0131z\u0131 ile tekrar formatlaman\u0131za gerek yok", "pypi_keywords_clean": "rest api django"}, "timofurrer/pysingleton": {"git_readme_clean": "pysingleton module provides decorator create singleton classes version abandoned please use anymore author timo furrer tuxtimo version know know singletons evil install install use use python programs", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "", "pypi_keywords_clean": ""}, "nhfruchter/pgh-bustime": {"git_readme_clean": "pghbustime time official interface port authority official api yes need api key register account port authority site examples setup using raw api output want standard json output use api wrapper around module get info busses stops route next bus stop east liberty station stop interface current location busses route info particular bus chain everything together find next bus outbound negley stop note caching caching results api queries expiring local store sort highly recommended due api somewhat restrictive initial limits highly recommend python lru cache module", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "", "pypi_keywords_clean": ""}, "TUW-GEO/repurpose": {"git_readme_clean": "repurpose package provides routines conversion image formats time series vice versa part works best readers writers supported main use case data sampled irregularly space time data sampled regular intervals alternatives package might better use case see detail readers writers conform api specifications base classes defined work without adpation citation use software publication please cite using zenodo doi aware badge links latest package version please select specific version get doi version normally always use doi specific version record citations ensure researchers access exact research artefact used reproducibility find additional information regarding doi versioning installation package installable pip code modules includes two main modules time series conversion including support spatial resampling time series image conversion including support temporal resampling module experimental moment alternatives data represented datacube projects might better suited needs package works netcdf input output converts time slices time series representation work several input formats stack change chunking allow time series optimized access assumes regular sampling space time far know similar cdo stronger focus netcdf contribute happy want contribute please raise issue explaining missing find bug also gladly accept pull requests master branch new features bug fixes development setup development recommend environment guidelines want contribute please follow steps fork repurpose repository account make new feature branch repurpose master branch add feature please include tests contributions one test directories use simple function called enough submit pull request master branch note project set using pyscaffold details usage information pyscaffold see", "git_description_clean": "routines conversion image formats time series vice versa", "git_keywords_clean": "", "pypi_description_clean": "repurpose package provides routines conversion image formats time series vice versa part works best readers writers supported main use case data sampled irregularly space time data sampled regular intervals alternatives package might better use case see detail readers writers conform api specifications base classes defined work without adpation citation use software publication please cite using zenodo doi aware badge links latest package version please select specific version get doi version normally always use doi specific version record citations ensure researchers access exact research artefact used reproducibility find additional information regarding doi versioning installation package installable pip code modules includes two main modules time series conversion including support spatial resampling time series image conversion including support temporal resampling module experimental moment alternatives data represented datacube projects might better suited needs package works netcdf input output converts time slices time series representation work several input formats stack change chunking allow time series optimized access assumes regular sampling space time far know similar cdo stronger focus netcdf contribute happy want contribute please raise issue explaining missing find bug also gladly accept pull requests master branch new features bug fixes development setup development recommend environment guidelines want contribute please follow steps fork repurpose repository account make new feature branch repurpose master branch add feature please include tests contributions one test directories use simple function called enough submit pull request master branch note project set using pyscaffold details usage information pyscaffold see", "pypi_keywords_clean": ""}, "mverteuil/widget-party": {"git_readme_clean": "widget pack quick start install latest stable version pypi add setting like include widgets like use entry done demo demo available use demo help choose widgets like use play quickly determine suitability limits image image", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "widget pack quick start install latest stable version pypi add setting like include widgets like use entry done demo demo available use demo help choose widgets like use play quickly determine suitability limits image image", "pypi_keywords_clean": ""}, "/reggie": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "reggie registration management system downloads docs full documentation available built packages available available feel free request feature report bug make changes master branch next release send pull request pester maintainer merged make sure add update build status alt build status alt coverage status alt documentation status", "pypi_keywords_clean": ""}, "crs-support/ftw": {"git_readme_clean": "framework testing wafs ftw purpose project created researchers modsecurity fastly help provide rigorous tests waf rules uses owasp core ruleset baseline test rules waf rule ruleset loaded yaml file issues http requests trigger rules users verify execution rule tests issued make sure expected response received attack goals use cases include find regressions waf deployments using continuous integration issuing repeatable attacks waf provide testing framework new rules modsecurity rule submitted must corresponding positive negative tests evaluate wafs common agreeable baseline ruleset owasp test verify custom rules wafs part core rule set release announcement check owasp crs blog installation writing first tests core ftw extensible based tests section lists resources formatted write use owasp crs wrote great blog post describing ftw tests written executed ground truth fields currently understood ftw reading two resources able get started writing tests likely checking status code responses web request responses using directive integrating ftw test regexes within waf logs refer provisioning crs require environment testing waf rules one created apache modsecurity version owasp core ruleset deployed checking repository typing", "git_description_clean": "framework testing wafs ftw", "git_keywords_clean": "waf modsecurity owasp", "pypi_description_clean": "", "pypi_keywords_clean": "waf"}, "/path": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "", "pypi_keywords_clean": ""}, "/steelscript-stock": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "stock report steelscript application framework steelscript collection libraries scripts python javascript interacting riverbed technology devices package demonstrates external data source incorporated plugin app framework associated reports complete guide installation see", "pypi_keywords_clean": ""}, "eofs/aws": {"git_readme_clean": "utility program amazon web services features command line interface boto wrapper fabric list instances regions elb services list instances specific elb manage instances run fabric tasks instances instances specific elb motivation love boto fabric combine goal project provide easy use command line interface boto provide tools finding hosts fabric remote calls using fabric write code find amazon instances pass name elastic load balancer name custom fabric function servers updated todo features instances manage amis aws auto scaling support installation configuration work minimal configuration need make sure environment variables set want use fabric execute code remote servers use different regions set necessary info settings file see boto documentation set amazon access credentials see fabric documentation set ssh access credentials usage examples see information command specific help list elb instances list instances list instances elb named mybalancer run fabric tasks instances run fabric tasks instances define fabfile used pass parameters methods fabric command run fabric tasks instances specific elb", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "", "pypi_keywords_clean": ""}, "akoumjian/datefinder": {"git_readme_clean": "datefinder extract dates text alt travis build status alt pypi downloads per day alt pypi version alt gitter chat python module locating dates inside text use package extract sorts date like strings document turn datetime objects module finds likely datetime strings uses convert datetime object installation sh use automodule datefinder members python support talk us submit issue", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "datefinder extract dates text alt travis build status alt pypi downloads per day alt pypi version alt gitter chat python module locating dates inside text use package extract sorts date like strings document turn datetime objects module finds likely datetime strings uses convert datetime object installation sh use automodule datefinder members python support talk us submit issue", "pypi_keywords_clean": "datetime parser nlp"}, "mobiusklein/glypy": {"git_readme_clean": "glypy glycan analysis glycoinformatics library python glycobiology study biological functions properties structures carbohydrate biomolecules also called glycans large molecules complex wide variety building blocks well modifications substitutions building blocks much way bioinformatics libraries provide ways represent dna rna protein sequences library attempts provide representation glycans much variation found building blocks structures monosaccharides caused substitutions functional groups common core structure features read write common glycan structure formats sources glycoct condensed glycoct xml glycominds linear code iupac three letter code retreive data using web services provided glytoucan run queries directly triplestore manipulate glycan structures traverse structures using either canonical rule ordering operate monosaccharide substituents nodes bonds edges add remove modify structures alter glycan properties identify substructures motifs classifying glycans evaluate structural similarities one several ordering comparator methods plot tree structures matplotlib rendering using configurable symbol nomenclature snfg cfg iupac layout using vector graphics perfect scaling example use cases calculate mass native derivatized glycan generate glycosidic cross ring cleavage fragments collection glycan structures performing database search perform substructure similarity searches exact ordering topological comparison exact fuzzy matching classify structure glycan annotate ms spectra glycan structures labeling peaks matched database entry download glytoucan find glycans list contain particular subtree find common subtrees database glycans performing treelet enrichment analysis synthesize possible glycans using set enzymes starting set seed structures", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "", "pypi_keywords_clean": "glycomics glycan carbohydrate glycoinformatics glypy glycosaminoglycan"}, "/pyfuzz": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "pyfuzz pyfuzz simple library used randomly generating number common file types examples found current functions includes ascii png jpg gif wide number languages including chinese han japanese russian raw bytes string groups full language list chinese han dutch english finnish french german greek hebrew italian japanese latin polish portugese russian serbian spanish", "pypi_keywords_clean": ""}, "mercadopago/mercadopago": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "mercadopago sdk module payments integration install python python basic checkout configure credentials get following address argentina brazil mexico venezuela colombia create payment get customer view custom checkout related apis developers site argentina brazil mexico venezuela colombia generic methods access resource mercadopago api using generic methods example want get sites list params authentication running tests python python", "pypi_keywords_clean": "api mercadopago checkout payment ipn sdk integration"}, "samuelcolvin/devtools": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "python devtools dev tools python debug print command python never things information see install required available output highlighted easier read usage code python devtools import debug whatever debug whatever outputs whatever list tip iceberg example code python import numpy np data range b range range boring debug data outputs image align center usage without import modify making available python code code python add devtools debug builtins try devtools import debug except importerror pass else builtins debug", "pypi_keywords_clean": ""}, "kelsoncm/python-brfied": {"git_readme_clean": "python brfied create brfied localflavors dont validate user data dont apply mask inputs license mit license mit copyright c kelsoncm permission hereby granted free charge person obtaining copy software associated documentation files software deal software without restriction including without limitation rights use copy modify merge publish distribute sublicense sell copies software permit persons software furnished subject following conditions copyright notice permission notice shall included copies substantial portions software software provided without warranty kind express implied including limited warranties merchantability fitness particular purpose noninfringement event shall authors copyright holders liable claim damages liability whether action contract tort otherwise arising connection software use dealings software", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "", "pypi_keywords_clean": "python br brazil brasil model form locale"}, "stdlib/lib": {"git_readme_clean": "standard library api development hosting integration platform standard library setup node python ruby web introduction standard library fastest easiest way build infinitely scalable apis standard library platform consists three components central registry library apis scalable serverless hosting platform simple command line tooling building managing api development standard library based function service serverless architecture initially popularized aws lambda use standard library build modular scalable apis developers minutes without manage servers gateways domains write documentation build sdks development workflow never easier focus writing code love let standard library handle everything else standard library uses open specification called faaslang function definitions execution run concerns questions building guide please reference faaslang repository view services published large growing developer community standard library search page table contents getting started creating first service connecting service endpoints accessing apis applications accessing apis http running apis background workers version control package management logging sourcecode additional functionality acknowledgements contact getting started get started standard library first make sure node installed available official website next install standard library cli tools ready start building upgrading previous versions running previous version standard library issues cli try cleaning old cli binary links first creating first service first thing want create workspace create new directory intend build services initialize workspace asked address log standard library registry yet account create one going note skip account creation unable use registry useful creating workspaces internet access next create service asked default function name entry point service useful want single entry point automatically generate service project scaffold created enter service directory directory see something like point hello world function automatically created standard library comes paired simple command testing functions locally running cloud test function examine file see following pass parameters using cli specifying named parameters note magic parameter automatically populated execution details provided terminates execution need documented specified parameters executing function pushing cloud push function development environment cloud release ready check service web use applications using functions gateway written line code yet mastery building service testing development staging environment online releasing private public consumption note default apis publish visible documentation page standard library public registry keep page private well restrict execution access add collaborators api modifying api permissions information see docs page another note staging environments like one created mutable replaced indefinitely releases immutable never overwritten however service torn releases ca replaced removed prevent mistakes bad actors connecting service endpoints notice create one function per service structure project however like internally also noted functions access access internally package npm behaves similarly command testing use main service directory add use like case calling return return magic parameter used property return string case local execution deployed environment release environment name semver accessing apis applications mentioned previous section use npm package available github npm access apis legacy applications even web browser sdks coming following months existing app would call function version would speak api accessing apis http definitely recommend using lib library npm make api calls specified also make https requests directly standard library gateway http query parameters mapped automatically parameters name maps directly running apis background workers run standard library service background worker immediately returns response runs function simply append bg url http query parameters search portion url example library use background responses default background response content type string indicating function name executing currently three different options background responses define deploy function info default set comment definition like default well nothing specified empty set comment definition like return empty length response params set comment definition like return example parameters specified parameter default value spit back parameters sent function even part function signature version control package management quick note version control standard library replacement normal workflows supplement focused around service creation execution unlimited access release torn download tarball automatically download unpack tarball working directory tarballs package contents nobody potentially teammates access whether share guts service others github npm mentioned releases immutable overwritten removed replaced afterwards development staging environments mutable overwrite much like logging logging services enabled default running service locally logs output console last output normally string return value function view remote logs dev release environments use following syntax default log type though specify limit number lines show argument sourcecode standard library sourcecode designed streamline creation different types projects sources provide defaults things like boilerplate code workflows directory setup get right development implementation complex functionality create services existing source codes create share sources installing service sourcecode create service source code directly command line create service using source code navigate standard library root directory run something like optionally specified version environment create new service based source code creating sources turn existing service source code navigate service run copy current directory contents new folder add file based file deploy draft source code cloud run publish versioned immutable source code registry run also fork existing source code belongs teammate publicly available modify publish account information source codes check docs additional functionality standard library comes packed bunch goodies service goes reason service platform acting use similarly roll updates platform builds using aws lambda may change update service latest build using may recommend pay attention community see full list commands available cli tools type conveniently output peruse yep really easy keep developments please star us github sign user account registry read service hosting keep track official updates official standard library website acknowledgements standard library product polybit love pay attention stdlibhq building next consider joining team shoot us also follow original author twitter keithwhor issues encouraged prs welcome happy board enjoy happy building thanks special thanks people companies believed supported vision development years slack slackhq stripe stripe romain huet romainhuet chad fowler chadfowler brian leroux brianleroux ahmad nassri ahmadnassri many", "git_description_clean": "standard library api development deployment management tools", "git_keywords_clean": "registry serverless faas nodejs node stdlib sdks api", "pypi_description_clean": "", "pypi_keywords_clean": "stdlib microservice serverless faas lib"}, "nioinnovation/xbee": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "xbee xbee provides implementation xbee serial communication api allows one easily access advanced features one xbee devices application written python example use case might look like code python installation install source extract source code computer run following command root source tree automatically install package install tornado support documentation see project build documentation ensure installed cd docs folder run make html documentation opened modern web browser information building modifying documentation see documentation sphinx project dependencies pyserial additional dependencies wanting use tornado ioloop run automated tests build documentation xbee firmware please ensure xbee device programmed latest firmware provided digi using old firmware revision supported may result unspecified behavior contributors paul malmsten pmalmsten greg rapp gdrapp brian blalor chris brackert cbrackert amit synderman marco sangalli james saunders james david walker dwalker", "pypi_keywords_clean": ""}, "ramses-tech/ra": {"git_readme_clean": "ra test suite generator helper library testing apis described raml box ra provides basic automated test suite test routes declared raml document provides test helpers augmenting custom tests test logic side effects etc ra primarily designed provide testing support ramses nefertari applications used api currently depends pytest may adapted test frameworks future works best using webtest require name ra god sun important god ancient egypt", "git_description_clean": "ra test suite generator helper library testing apis described raml", "git_keywords_clean": "testing", "pypi_description_clean": "ra test suite generator helper library testing apis described raml box ra provides basic automated test suite test routes declared raml document provides test helpers augmenting custom tests test logic side effects etc ra primarily designed provide testing support ramses nefertari applications used api currently depends pytest may adapted test frameworks future works best using webtest require name ra god sun important god ancient egypt try dev run test suite check example example raml test file helpful reference see docs", "pypi_keywords_clean": "web raml"}, "magmax/colorize": {"git_readme_clean": "colorize give color remote tty version downloads tests coverage wheel free checkout installation usage two options install use two ways use rendering output way use method disgusting things long outputs options change output format argument code code uses format use special variables like code show time code show message code show relative time combine wish example default date format code change code configuration file find configuration file current directory home directory default path directory first one found used search format file easy csv file next fields example configure colorize output available colors code code code code code code code code code example simulate colordiff emulate colordiff use configuration file enough alt travis results alt coveralls results alt latest pypi version alt number pypi downloads alt wheel status lastest egg code output format allowed logging", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "colorize give color remote tty version downloads tests coverage wheel free checkout installation usage two options install use two ways use rendering output way use method disgusting things long outputs options change output format argument code code uses format use special variables like code show time code show message code show relative time combine wish example default date format code change code configuration file find configuration file current directory home directory default path directory first one found used search format file easy csv file next fields example configure colorize output available colors code code code code code code code code code example simulate colordiff emulate colordiff use configuration file enough alt travis results alt coveralls results alt latest pypi version alt number pypi downloads alt wheel status lastest egg code output format allowed logging", "pypi_keywords_clean": "interface"}, "/null": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "null implements provides singleton used like equal returns instead raising returns instead raising routine converts mappings sequences nullified variant singleton clearing apis distinguish keyword argument set user simply set user run tests easiest way would extract source tarball run python change log long overdue python support initial published version authors glued together", "pypi_keywords_clean": ""}, "/js-knockout": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "introduction library packages requires integration web framework making sure original resources shipped directory published url use import want resources included page import knockout changes updated knockout version current initial release", "pypi_keywords_clean": ""}, "peeringdb/django-peeringdb": {"git_readme_clean": "peeringdb models local synchronization django see docs", "git_description_clean": "django peeringdb models", "git_keywords_clean": "", "pypi_description_clean": "", "pypi_keywords_clean": ""}, "unt-libraries/pyuntl": {"git_readme_clean": "pyuntl python module reading writing untl metadata records license see acknowledgements pyuntl developed unt libraries worked number developers years including brandon fredericks kurt nordstrom joey liechty lauren ko mark phillips questions project feel free contact mark phillips", "git_description_clean": "python package reading writing untl metadata records", "git_keywords_clean": "", "pypi_description_clean": "see home page information", "pypi_keywords_clean": "untl metadata digital libraries records"}, "matthiask/pdfdocument": {"git_readme_clean": "pdfdocument wrapper reportlab allows easy creation pdf documents letters reports pdfdocument comes two different pdf templates letters reports difference layout first page letter additional frame address top smaller main content area usage follows letter generates default styles using point fonts base size report uses points changed calling exists also special type report confidential report differences confidentiality marked using red cross top first page watermark background styles call generates set predefined styles yes includes following styles list neither exhaustive promise time use attributes directly except case tables convenience methods exist almost styles described next chapter content content passed following methods escaped default reportlab supports markup language want use directly either use resort creating instances hand headings paragraphs unordered lists various elements tables canvas methods canvas methods work canvas directly platypus objects mostly useful inside stationery functions mostly use reportlab canvas methods directly resort following methods special cases additional methods django integration pdfdocument helpers generating pdfs django views notably svg support uses svglib dinu gherman found pypi", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "pdfdocument wrapper reportlab allows easy creation pdf documents letters reports pdfdocument comes two different pdf templates letters reports difference layout first page letter additional frame address top smaller main content area usage follows letter generates default styles using point fonts base size report uses points changed calling exists also special type report confidential report differences confidentiality marked using red cross top first page watermark background styles call generates set predefined styles yes includes following styles list neither exhaustive promise time use attributes directly except case tables convenience methods exist almost styles described next chapter content content passed following methods escaped default reportlab supports markup language want use directly either use resort creating instances hand headings paragraphs unordered lists various elements tables canvas methods canvas methods work canvas directly platypus objects mostly useful inside stationery functions mostly use reportlab canvas methods directly resort following methods special cases additional methods django integration pdfdocument helpers generating pdfs django views notably svg support uses svglib dinu gherman found pypi", "pypi_keywords_clean": ""}, "syrusakbary/djinja": {"git_readme_clean": "djinja djinja tries integrate django aim replace completely django template system including administration currently following templating modules written working django administration django debug toolbar near future could convert django templates syntax syntax awesome ideas please let us know installation add directory python path add following template loader top project file tying template loaders allows djinja manage automatically templates including django templates note install try access django administration get error caused django administration templates adapted important adapt website templates get error rendering djinja converser ready custom filters extensions djinja uses templatetag library approach django meaning app directory modules represents template library providing new filters tags custom class used register components djinja automatically make existing django filters usable jinja custom tags need rewrite jinja extensions manually example template library may also define additional extensions filters tests globas via haml djinja render haml pages installed simple put extension template adding variable settings haml templates also include extend etc html templates viceversa administration install django administration templating add example configuration benchmarking running tests django djinja performance using instead django templating administration django debug toolbar install django debug toolbar templating add example configuration todos bugs see", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "djinja djinja tries integrate django aim replace completely django template system including administration currently following templating modules written working django administration django debug toolbar near future could convert django templates syntax syntax awesome ideas please let us know installation add directory python path add following template loader top project file tying template loaders allows djinja manage automatically templates including django templates note install try access django administration get error caused django administration templates adapted important adapt website templates get error rendering djinja converser ready custom filters extensions djinja uses templatetag library approach django meaning app directory modules represents template library providing new filters tags custom class used register components djinja automatically make existing django filters usable jinja custom tags need rewrite jinja extensions manually example template library may also define additional extensions filters tests globas via haml djinja render haml pages installed simple put extension template adding variable settings haml templates also include extend etc html templates viceversa administration install django administration templating add example configuration benchmarking running tests django djinja performance using instead django templating administration django debug toolbar install django debug toolbar templating add example configuration todos bugs see", "pypi_keywords_clean": ""}, "pypa/packaging": {"git_readme_clean": "packaging core utilities python packages documentation discussion run bugs file also join freenode ask questions get involved code conduct everyone interacting packaging project codebases issue trackers chat rooms mailing lists expected follow code conduct", "git_description_clean": "core utilities python packages", "git_keywords_clean": "", "pypi_description_clean": "packaging core utilities python packages documentation discussion run bugs file also join freenode ask questions get involved code conduct everyone interacting packaging project codebases issue trackers chat rooms mailing lists expected follow code conduct changelog improve error messages invalid requirements given drop support python define minimal pyparsing version add attributes add make easy determine release development release add canonicalize version strings instances add support deprecated marker undocumented setuptools marker addition newer markers fix regression parsing requirements whitespaces comma separators fix bug overly strict matching legacy requirements implement requirement specifiers pep normalize spellings prefixes fix logic error causing inconsistent answers whether contained within normalize release candidates instead expose constant regular expression matching valid version backwards incompatible refactor specifier support sanely handle legacy specifiers well pep specifiers backwards incompatible move specifier support allow sorted together add enable easily parsing version string either depending pep validity initial release", "pypi_keywords_clean": ""}, "sumerc/yappi": {"git_readme_clean": "yappi yet another python profiler time support time profiling motivation cpython standard distribution comes three profilers implemented c module based pure python seen small subset cprofile major issue profilers lack support programs cpu time want profile application must give entry point profilers maybe merge outputs none profilers designed work impossible profile application retrieve statistics stop start later fly without affecting profiled application highlights profiler time thread application profile statistics obtained thread time profile statistics show actual cpu time used instead wall time profiler pollution effect application minimal installation installed via pypi source directly documentation introduction clock types api thanks features profiler results saved callgrind pstat formats new profiler results merged different sessions new profiler results easily converted pstats new profiling multithreaded python applications transparently supports profiling cpu time new profiler started thread time ability get statistics time without even stopping profiler various flags profiler results supports python limitations threads must derived threading module thread object talks python performance profiling guts glory pycharm integration yappi default profiler yappi installed use see official documentation details", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "yappi yet another python profiler time support time profiling motivation cpython standard distribution comes three profilers implemented c module based pure python seen small subset cprofile major issue profilers lack support programs cpu time want profile application must give entry point profilers maybe merge outputs none profilers designed work impossible profile application retrieve statistics stop start later fly without affecting profiled application highlights profiler time thread application profile statistics obtained thread time profile statistics show actual cpu time used instead wall time profiler pollution effect application minimal installation installed via pypi source directly documentation introduction clock types api thanks features profiler results saved callgrind pstat formats new profiler results merged different sessions new profiler results easily converted pstats new profiling multithreaded python applications transparently supports profiling cpu time new profiler started thread time ability get statistics time without even stopping profiler various flags profiler results supports python limitations threads must derived threading module thread object talks python performance profiling guts glory pycharm integration yappi default profiler yappi installed use see official documentation details", "pypi_keywords_clean": "python thread multithread profiler"}, "whtsky/bencoder-pyx": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "fast bencode implementation cython supports image alt macos test status target image alt windows test status target image alt linux test status target image alt pypi license target image alt codecov coverage target image alt pypi downloads target install bash usage python changelog version drop support python performance boost method version performance improvement fix package metainfo version use ordereddict instaed dict support encoding subclasses dict", "pypi_keywords_clean": "bencoding encode decode bittorrent bencode bencoder cython"}, "kelleyk/iterpipes3": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "", "pypi_keywords_clean": ""}, "davidmarble/pywin": {"git_readme_clean": "pywin pywin lightweight python launcher switcher windows command line similar written basic windows batch scripts shell script support use bash command line shell tools based python development windows pywin supports several useful features defined command line conventions hash bang python version headers source files pywin lacks features basics extras requirements windows xp command prompt support windows vista support requires symbolic links least one installation python though useful without least two pip git installation make sure main python installation want pywin live path multiple python installations recommended main scripts directories one installation path example pywin create individual launch scripts directly access core python installations called directly without arguments windows command prompt bash prompt use feature call code sh launchers created python installations found windows registry windows batch files added directory pywin located relies windows links created programmatically must windows vista installed make use project launch specific python version using pywin add directive first second line source file correct interpreter called currently supports python launchers created command use feature must associate extension using included utility code sh pywin note commands work windows command line shell genlaunchers code sh launch either specific version python source file note specifying version python command line override version header source file example code sh version search order original restore registry settings launch administrator apply changes remove python keys note users override values pyhome variable used set manner environment variable set use environment variable set use set call lasts current session path script", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "pywin pywin lightweight python launcher switcher windows command line similar written basic windows batch scripts shell script support use bash command line shell tools based python development windows pywin supports several useful features defined command line conventions hash bang python version headers source files pywin lacks features basics extras requirements windows xp command prompt support windows vista support requires symbolic links least one installation python though useful without least two pip git installation make sure main python installation want pywin live path multiple python installations recommended main scripts directories one installation path example pywin create individual launch scripts directly access core python installations called directly without arguments windows command prompt bash prompt use feature call code sh launchers created python installations found windows registry windows batch files added directory pywin located relies windows links created programmatically must windows vista installed make use project launch specific python version using pywin add directive first second line source file correct interpreter called currently supports python launchers created command use feature must associate extension using included utility code sh pywin note commands work windows command line shell genlaunchers code sh launch either specific version python source file note specifying version python command line override version header source file example code sh version search order original restore registry settings launch administrator apply changes remove python keys note users override values pyhome variable used set manner environment variable set use environment variable set use set call lasts current session path script", "pypi_keywords_clean": "python windows version switcher launcher"}, "perone/protocoin": {"git_readme_clean": "protocoin bitcoin protocol pure python bitcoin protocol implementation documentation see documentation information", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "pure python bitcoin protocol implementation", "pypi_keywords_clean": "bitcoin protocol"}, "/flask-tryton": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "adds tryton support flask application default transactions readonly except put post delete patch request methods provides also routing converters nutshell three configuration options available report issues please visit bugtracker", "pypi_keywords_clean": "flask tryton web"}, "/contact-form": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "", "pypi_keywords_clean": ""}, "JA-VON/qgen": {"git_readme_clean": "qgen generate volume questions based template", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "generate random value questions based template", "pypi_keywords_clean": ""}, "uktrade/directory-validators": {"git_readme_clean": "directory uk exporters validators requirements installation usage development testing publish pypi package published pypi merge master need locally get credentials rattic add environment variables host machine setting run following command", "git_description_clean": "", "git_keywords_clean": "live", "pypi_description_clean": "directory uk exporters validators requirements installation usage development testing publish pypi package published pypi merge master need locally get credentials rattic add environment variables host machine setting run following command", "pypi_keywords_clean": ""}, "andreypopp/configure": {"git_readme_clean": "yaml configuration library provides interpolation string configuration values configuration inheritance configuration composition object level configuration like construct object calling function arguments development takes place", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "yaml configuration library provides interpolation string configuration values configuration inheritance configuration composition object level configuration like construct object calling function arguments development takes place", "pypi_keywords_clean": ""}, "sontek/pyramid-celery": {"git_readme_clean": "getting started include either setting includes calling ini need tell ini file celery section python free use celery example class based python decorator based python get pyramid settings may access configuration default assumes want configure celery via ini settings calling already main application want use ini used configure app following python want use standard celeryconfig python file set true like ini get information example ini configuration looks like ini tasks use celerybeat periodic tasks need declare config section per task options task python task need executed type type scheduling configuration uses options schedule actual schedule configuration args additional positional arguments kwargs additional keyword arguments example configuration ini gotcha want watchout scheduled tasks utc default want schedule exact local timezone need set documentation found need find timezones available following python worker execution celerybeat worker read configuration schedule tasks queue executed time defined means using celerybeat end running workers bash first command standard worker command read messages queue run task second command read celerybeat configuration periodically schedule tasks queue routing would like route task specific queue define route per task declaring section example configuration ini running worker run worker use standard celery command additional argument bash defined variables like use argument comma separated list key value pairs bash values spaces break parser reason csv instead using multiple times bug celery fix bug api ticket use celerybeat scheduler need run beat flag run beat worker time bash launch separately like bash logging use configuration use logging configuration loaded use default celery loggers likely want add logging section ini celery well ini update section include want use default celery loggers set celery section celery worker processes propagade exceptions inside tasks swallow silently default related behavior reading asynchronous task results back see tasks fail might need configure logger propagate exceptions ini want use default celery loggers set celery section demo see action check run bash", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "getting started include either setting includes calling ini need tell ini file celery section python free use celery example class based python decorator based python get pyramid settings may access configuration default assumes want configure celery via ini settings calling already main application want use ini used configure app following python want use standard celeryconfig python file set true like ini get information example ini configuration looks like ini tasks use celerybeat periodic tasks need declare config section per task options task python task need executed type type scheduling configuration uses options schedule actual schedule configuration args additional positional arguments kwargs additional keyword arguments example configuration ini gotcha want watchout scheduled tasks utc default want schedule exact local timezone need set documentation found need find timezones available following python worker execution celerybeat worker read configuration schedule tasks queue executed time defined means using celerybeat end running workers bash first command standard worker command read messages queue run task second command read celerybeat configuration periodically schedule tasks queue routing would like route task specific queue define route per task declaring section example configuration ini running worker run worker use standard celery command additional argument bash defined variables like use argument comma separated list key value pairs bash values spaces break parser reason csv instead using multiple times bug celery fix bug api ticket use celerybeat scheduler need run beat flag run beat worker time bash launch separately like bash logging use configuration use logging configuration loaded use default celery loggers likely want add logging section ini celery well ini update section include want use default celery loggers set celery section celery worker processes propagade exceptions inside tasks swallow silently default related behavior reading asynchronous task results back see tasks fail might need configure logger propagate exceptions ini want use default celery loggers set celery section demo see action check run bash support celery properly handle handle tuple admins", "pypi_keywords_clean": "paste pyramid celery message queue amqp job task distributed"}, "stackforge/winchester": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "winchester openstack notification event processing library based persistant streams winchester designed process event streams produced openstack notifications events represented simple python dictionaries flat dictionaries nested minimum three keys individual keys event dictionary called traits strings integers floats datetimes processing often large notifications come openstack winchester uses stackdistiller library extract flattened events notifications contain data actually need processing winchester processing done triggers pipelines trigger composed like persistant query collecting events want process persistant stream stored sql database set distinguishing traits separate list events distinct streams similar group clause sql query specifies conditions given stream match trigger fire events stream sent pipeline listed processing batch also listed given stream meet time expired sent alternate processing optional least one must specified pipeline simply list simple handlers handler pipeline receives list events given stream sorted timestamp turn handlers filter events list add new events changes seen handlers pipeline handlers avoid operations modifying list events pipeline processing later error instead handlers process list events without raising exception commit call made handler giving chance perform actions like sending data external systems handlers simple write pretty much object implements appropriate commit rollback methods handler installing running winchster installable simple python package installed appropriate database url specified config file example included etc directory create appropriate database schema need run sql hand want look schema following print appropriate table creation sql done configured appropriate using stackdistiller configs examples etc winchester codebase add events system calling method winchester triggermanager processing openstack notifications call pare notification event stackdistiller call reading openstack notifications rabbitmq queue plugin yagi notification processor included winchester simply add apps line section queues want listen add section run actual pipeline processing run separate daemon run pass flag tell run background daemon winchester uses optimistic locking scheme database coordinate firing expiring processing streams run many processes like yagi daemon feeding triggermanagers need handle incoming events many need handle resulting processing load scaling system horizontally", "pypi_keywords_clean": "stacktach pipeline events notification openstack triggers"}, "tnajdek/json-utils": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "", "pypi_keywords_clean": ""}, "leplatrem/logging-color-formatter": {"git_readme_clean": "alt latest pypi version alt latest travis ci build status colored logging formatter installation usage ini changes fix missing output stacktraces exceptions fix missing interpolation strings using logger arguments run tests licence apache license", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "alt latest pypi version alt latest travis ci build status colored logging formatter installation usage ini changes fix missing stacktraces exceptions fix missing interpolation strings using logger arguments run tests licence apache license", "pypi_keywords_clean": "logging"}, "justanr/datestuff": {"git_readme_clean": "datestuff need code helpers complete replacement modules frankly love built code module almost everything need however things tend creep datetime datetime things like creating range dates creating unfixed date checking two datetimes within certain delta one another short look included relativedate relativedatetime allow create unfixed code code instance providing code offset factory method default code uses code code uses code default factories default offset code python however also possible provide factories well python long underlying factory produces code code compatible object everything work compatible mean implements code code interface additionally static offset today desired simply provide offset argument code dateutil code note currently code code interoperable python code code also allow comparing regular code code instances standard operators etc making incredibly useful quickly defining date boundaries defined statically serializer orm model python adding subtracting relative instances actually operate offsets rather underlying code code values python alternate constructors provided makes sense allows passing offset defaults code provided code default constructor code default constructor allows passing tzinfo object factory code factory produces datetimes note naive relies underlying code code default constructor allow passing tzinfo object convenience sake also truly static constructors code hoists regular date relative context code hoists regular datetime code hoists date code context allows passing tzinfo object factory looks like code additional static constructors code derived truly needed python finally functionality implemented directly relative instance proxied underlying code code instance daterange range dates another tool find needing time time however eager creation sometimes expensive large range instead code modeled python code type fast path lookup membership lazy iteration indexing slicing slices return new code objects python code also allows creating open ended range simply omitting stop argument case functionality work using code negative end currently code support code hood uses code python compatiblity could resolved future unlikely code however compatible code code like objects code like objects interestingly would apply code code well utils currently util code useful comparing two code code like instances within certain delta python simple boundary checking needed tool much light weight either code code sadly another tool interoperate code code unorderable least python", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "datestuff need code helpers complete replacement modules frankly love built code module almost everything need however things tend creep datetime datetime things like creating range dates creating unfixed date checking two datetimes within certain delta one another short look included relativedate relativedatetime allow create unfixed code code instance providing code offset factory method default code uses code code uses code default factories default offset code python however also possible provide factories well python long underlying factory produces code code compatible object everything work compatible mean implements code code interface additionally static offset today desired simply provide offset argument code dateutil code note currently code code interoperable python code code also allow comparing regular code code instances standard operators etc making incredibly useful quickly defining date boundaries defined statically serializer orm model python adding subtracting relative instances actually operate offsets rather underlying code code values python alternate constructors provided makes sense allows passing offset defaults code provided code default constructor code default constructor allows passing tzinfo object factory code factory produces datetimes note naive relies underlying code code default constructor allow passing tzinfo object convenience sake also truly static constructors code hoists regular date relative context code hoists regular datetime code hoists date code context allows passing tzinfo object factory looks like code additional static constructors code derived truly needed python finally functionality implemented directly relative instance proxied underlying code code instance daterange range dates another tool find needing time time however eager creation sometimes expensive large range instead code modeled python code type fast path lookup membership lazy iteration indexing slicing slices return new code objects python code also allows creating open ended range simply omitting stop argument case functionality work using code negative end currently code support code hood uses code python compatiblity could resolved future unlikely code however compatible code code like objects code like objects interestingly would apply code code well utils currently util code useful comparing two code code like instances within certain delta python simple boundary checking needed tool much light weight either code code sadly another tool interoperate code code unorderable least python mit license mit copyright c alec nikolas reiter permission hereby granted free charge person obtaining copy software associated documentation files software deal software without restriction including without limitation rights use copy modify merge publish distribute sublicense sell copies software permit persons software furnished subject following conditions copyright notice permission notice shall included copies substantial portions software software provided without warranty kind express implied including limited warranties merchantability fitness particular purpose noninfringement event shall authors copyright holders liable claim damages liability whether action contract tort otherwise arising connection software use dealings software", "pypi_keywords_clean": "dates datetime"}, "mythonlang/pgen2": {"git_readme_clean": "pypgen python implementation python parser generator pgen", "git_description_clean": "python implementation python parser generator pgen", "git_keywords_clean": "", "pypi_description_clean": "", "pypi_keywords_clean": "parser generator"}, "/mopidy": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "mopidy mopidy extensible music server written python mopidy plays music local disk spotify soundcloud google play music edit playlist phone tablet computer using range mpd web clients stream music cloud vanilla mopidy plays music local disk radio streams extensions mopidy play music cloud services like spotify soundcloud google play music mopidy extension support backends new music sources easily added mopidy server mopidy python application runs terminal background linux computers macs network connectivity audio output box mopidy mpd http server additional frontends controlling mopidy installed extensions everybody use favorite client people around connect favorite mpd web client mopidy server search music manage playlist together browser mpd client available popular operating systems control music phone tablet computer mopidy raspberry pi raspberry pi popular device run mopidy either using raspbian arch linux quite slow affordable fact kickstarter funded gramofon modern cloud jukebox project used mopidy raspberry pi prototype gramofon device mopidy also major building block pi musicbox integrated audio jukebox system raspberry pi mopidy hackable mopidy extension support python javascript apis make mopidy perfect building hacks one project raspberry pi embedded old cassette player buttons volume control wired gpio raspberry pi used control playback custom mopidy extension cassettes nfc tags used select playlists spotify get started mopidy check irc announcement list twitter alt latest pypi version alt travis ci build status alt test coverage", "pypi_keywords_clean": ""}, "requests/requests-oauthlib": {"git_readme_clean": "project provides oauth library support oauth workflow oauth seem overly complicated sure quirks luckily hides let focus task hand accessing protected resources using simple pycon accessing resources need obtain credentials provider twitter authorization user wish retrieve resources read full oauth workflow oauth generally simpler oauth comes flavours common authorization code grant also known webapplication flow fetching protected resource obtaining access token extremely simple however accessing resources need obtain credentials provider google authorization user wish retrieve resources read full installation install requests use pip bash image alt documentation status scale target", "git_description_clean": "oauthlib support", "git_keywords_clean": "python", "pypi_description_clean": "project provides oauth library support oauth workflow oauth seem overly complicated sure quirks luckily hides let focus task hand accessing protected resources using simple pycon accessing resources need obtain credentials provider twitter authorization user wish retrieve resources read full oauth workflow oauth generally simpler oauth comes flavours common authorization code grant also known webapplication flow fetching protected resource obtaining access token extremely simple however accessing resources need obtain credentials provider google authorization user wish retrieve resources read full installation install requests use pip bash image alt documentation status scale target history unreleased nothing yet january project depends oauthlib support versions oauthlib updated tests use instance instead objects methods acceept paramether typically instance previously tried guess provide client user credentials incorrectly incompatible oauth servers incompatible breaking changes oauthlib seek correctly provide older implementation also raise correct exceptions username password present legacy clients avoid automatic netrc authentication january adjusted version specifier dependency project yet compatible dropped dependency minor changes clean code make june removed support python python project supports python python added several examples documentation added plentymarkets compliance fix added property match corresponding property february added fitbit compliance fix fixed issue newlines response body access token request would cause errors trying extract token fixed issue introduced users passing several methods would encounter conflicts auth argument used preference options september allowed take parameters purposes automatic token refresh may need july use authorization header provided allow explicit bypass authorization header setting pass kwarg refreshing tokens miscellaneous cleanups february fixed bug sending authorization headers username password present make sure clear session token obtaining new one improvements slack compliance fix avoid timing problems around token refresh allow passing arbitrary arguments requests calling december add compliance fix slack add compliance fix mailchimp exceptions carry entire response status code pass keyword arguments refreshing tokens automatically send authorization headers body maximize compatibility available session client values allow sending custom headers refreshing tokens set defaults may fix raised instead error raise requests exceptions responses flow avoid initializing class without complete client information october new property allows easily determine session already authorized oauth tokens new exception classes make easier catch identify exceptions june new install target people using signature method fixed bug supplied state param used auth url https checking disabled setting environment variable upon redirects token fetching raise detailed error message response body incorrectly encoded request denied added support custom clients compliance fix sina weibo multiple fixes facebook compliance fix compliance fixes body properly bytes python logging properly done namespace instead piggybacking oauthlib namespace logging introduced auth session september methods return unicode strings renamed consistency added facebook compliance fix hook added linkedin compliance fix added compliance hook invoked parsing refresh token correctly limit compliance hooks running content type guessing done content type given updates instead replacing non case insensitive dict remove last use state param supplied", "pypi_keywords_clean": ""}, "xeroc/uptick": {"git_readme_clean": "uptick swiss army knife interacting bitshares blockchain stable develop documentation documentation found installation contributing uptick welcomes contributions anyone everyone please see guidelines contributing code conduct discussion developers discussions around development use library found dedicated telegram channel license copy license available license file", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "uptick swiss army knife interacting bitshares blockchain stable develop documentation documentation found installation contributing uptick welcomes contributions anyone everyone please see guidelines contributing code conduct discussion developers discussions around development use library found dedicated telegram channel license copy license available license file", "pypi_keywords_clean": "bitshares library api rpc cli"}, "amiorin/blaz": {"git_readme_clean": "intro blaz runs scripts inside docker blaz create docker images dependencies script like ansible aws cli terraform puppet chef make go requirements linux osx dinghy works box static version docker nfs better vboxsf could stale scripts osx docker image blaz dinghy works box quick start environment variables defaults override environment variables like forwarded next container former printed latter useful secrets like aws credentials inside jenkins strings inside environment variable forwarded environment variables reserved env variables reserved env var explanation digest fullpath script used understand need start new debugging purpose blaz version inside container want compose two blaz scripts want start two different containers script access files directory somewhere else allows mount volume different directory current script using relative path like used development mode every env var starting like contains list custom environment variables forwarded override specify docker executable multiple versions override nested scripts blaz script invoke another blaz script new docker container used nested script unless define environment variable blaz api pull blaz always pulls docker image allows use latest jenkins script improve image without making new commits project use disable behaviour use cases jenkins ansible build docker images build docker images split compile build example create script compile go source code alpine blaz go mb build alpine docker static go executable mb go program push docker container registry ansible entrypoint trick wrapper script fix user permissions check version blaz contains example python publish development install pyenv", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "", "pypi_keywords_clean": ""}, "edsu/wikidata-suggest": {"git_readme_clean": "simple command line tool interactively reconciling data wikidata first want install installed get command line tool likely want use little data library example csv spreadsheet author column like link wikidata something like", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "", "pypi_keywords_clean": ""}, "/jupyterhub": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "technical overview installation configuration docker contributing license help resources jupyterhub jupyterhub create hub spawns manages proxies multiple instances jupyter notebook server project jupyter created jupyterhub support many users hub offer notebook servers class students corporate data science workgroup scientific research project high performance computing group technical overview three main actors make jupyterhub hub tornado process configurable http proxy multiple jupyter notebook servers basic principles operation hub launches proxy proxy forwards requests hub default hub handles login spawns servers demand hub configures proxy forward url prefixes notebook servers jupyterhub also provides rest api administration hub users installation check prerequisites based system python greater using nodejs npm dependencies installed conda using install recent version example install linux using package installs executable currently required npm work tls certificate key https communication domain name install packages using install jupyterhub along dependencies including plan run notebook servers locally install jupyter notebook jupyterlab using jupyterhub installed proxy plan run notebook servers locally need install jupyter notebook package run hub server start hub server run command visit browser sign unix pam credentials note allow multiple users sign server need run command privileged user root wiki describes run server less privileged user requires configuration system configuration getting started section documentation explains common steps setting jupyterhub jupyterhub tutorial provides video sample configurations jupyterhub create configuration file generate default config file settings descriptions start hub start hub specific url port https authenticators authenticator description pamauthenticator default authenticator oauthenticator oauth jupyterhub authenticator oauthenticator ldapauthenticator simple ldap authenticator plugin jupyterhub kerberosauthenticator kerberos authenticator plugin jupyterhub spawners spawner description localprocessspawner default spawner starts servers local processes dockerspawner spawn servers docker containers kubespawner kubernetes spawner jupyterhub sudospawner spawn servers without root systemdspawner spawn notebook servers using systemd batchspawner designed clusters using batch scheduling software yarnspawner spawn notebook servers distributed hadoop cluster wrapspawner wrapspawner profilesspawner enabling runtime configuration spawners docker starter docker image jupyterhub gives baseline deployment jupyterhub using docker important image contains hub configuration general one needs make derivative image least setting authenticator spawner run servers may system hub jupyter notebook version greater must installed jupyterhub docker image started following command command create container named stop resume hub service listening interfaces port makes good choice testing jupyterhub desktop laptop want run docker computer public ip must secure ssl adding ssl options docker configuration using ssl enabled proxy mounting volumes allow store data outside docker image host system persistent even start new image command spawn root shell docker container use root shell create system users container accounts used authentication jupyterhub default configuration contributing would like contribute project please read contributor documentation file explains set development installation run test suite contribute documentation view vision next directions project see jupyterhub community roadmap note platform support jupyterhub supported based systems jupyterhub officially support windows may able use jupyterhub windows use spawner authenticator work windows jupyterhub defaults bugs reported windows accepted test suite run windows small patches fix minor windows compatibility issues basic installation may accepted however systems would recommend running jupyterhub docker container linux vm additional reference tornado documentation windows platform support license use shared copyright model enables contributors maintain copyright contributions code licensed terms revised bsd license help resources encourage ask questions jupyter mailing list participate development discussions get help talk us jupyterhub gitter channel reporting issues jupyterhub tutorial documentation jupyterhub pdf latest pdf stable documentation jupyterhub rest api documentation project jupyter pdf project jupyter website jupyterhub follows jupyter community guides technical overview installation configuration docker contributing license help resources", "pypi_keywords_clean": "interactive interpreter shell web"}}