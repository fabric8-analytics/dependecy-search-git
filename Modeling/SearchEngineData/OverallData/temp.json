{"jorgebastida/glue": {"git_readme_clean": "glue glue is a simple command line tool to generate sprites the latest documentation is available at installation instructions glue users mailing list features automatic sprite image metadata creation including css less scss cocosd json array hash caat automatic multi dpi sprite creation support for multi sprite projects create sprites from multiple folders recursively multiple available automatic around source images configurable watch option to keep glue running watching for file changes project sprite and image level configuration via static config files customizable using jinja templates css optional less scss output format css configurable css customizable python and supported really example using the gorgeous mb you will get the following kb image and also an with all the necessary css classes for this sprite do you want to know more visit the quickstart guide contribute fork the repository on github to start making your changes to the master branch or branch off of it write a test which shows that the bug was fixed or that the feature works as expected use send a pull request and bug the maintainer until it gets merged and published make sure to add yourself to authors is your company using glue we are creating a list of companies using glue in production if your company use please send an email or send me a message to i would really appreciate it we need your help there are several features that users would love to have but they require a substancial amount of work and dedication so we are looking for feature sponsors if you want to lead the development testing of any of the following features please contact here you have some examples windows support i m not a windows user needs somebody who care about how works on windows and write down some installation instructions cocosd format already exists but we need somebody to give it some love new formats after is ready to accept new output formats if you want to create a new format contact me binary packaging for osx and windows for some users it would be really cool if they were able to download an already packaged binary version", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "glue is a simple command line tool to generate sprites using any kind of source images like png jpeg or gif glue will generate a unique png file containing every source image and a map file including the necessary information to use it", "pypi_keywords_clean": "glue sprites css cocosd"}, "svanoort/pyresttest": {"git_readme_clean": "pyresttest table of contents what is it status installation sample test examples installation how do i use it running a simple test using json validation interactive mode verbose output other goodies basic test set syntax import example url test custom http options special curl settings syntax limitations benchmarking metrics benchmark report formats rpm based installation project policies faq feedback and contributions what is it a rest testing and api microbenchmarking tool tests are defined in basic yaml or json config files no code needed minimal dependencies pycurl pyyaml optionally future making it easy to deploy on server for smoketests healthchecks supports generate extract validate mechanisms to create full test scenarios returns exit codes on failure to slot into automated configuration management orchestration tools also supplies parseable logs logic is written and extensible in python status new full python support in alpha download it pip install future and give it a try apache license version changelog shows the past and present milestones show the future roadmap the changelog will also show features fixes currently merged to the master branch but not released to pypi yet pending installation tests across platforms installation pyresttest works on linux or mac with python or with module future installed first we need to install package python pycurl ubuntu debian sudo centos rhel sudo alpine sudo mac don t worry about it other platforms unsupported you may get it to work by installing pycurl pyyaml manually also include future for python no guarantees though this is needed because the pycurl dependency may fail to install by pip in very rare cases you may need to intall python pyyaml if pip cannot install it correctly it is easy to install the latest release by pip sudo also install future if on python if pip isn t installed we ll want to install it first if that is not installed we ll need to install it first ubuntu debian sudo centos rhel sudo mac os x with homebrew it s included or with just python installed releases occur every few months if you want to use unreleased features it s easy to install from source see the change log for feature status the master branch tracks the latest it is unit tested but less stable than the releases the stable branch tracks tested releases troubleshooting installation almost all installation issues are due to problems with pycurl and pycurl s native libcurl bindings it is easy to check if pycurl is installed correctly if this returns correctly pycurl is installed if you see an importerror or similar it isn t you may also verify the pyyaml installation as well since that can fail to install by pip in rare circumstances error installing by pip this is caused by libcurl not being installed or recognized first install pycurl using native packages as above alternately try installing just the libcurl libraries on ubuntu debian on centos rhel virtualenv installation pycurl should install by pip but sometimes has issues with pycurl libcurl manually copying in a working system pycurl installation may help sample test this will check that apis accept operations and will smoketest an application examples the quickstart should be everyone s starting point here s a really good example for how to create a user and then do tests on it this shows how to use extraction from responses templating and different test types if you re trying to do something fancy take a look at the content test yaml this shows most kinds of templating variable uses it shows how to read from file using a variable in the file path and templating on its content pyresttest isn t limited to json there s an example for submitting form data there s a whole folder of example tests to help get started how do i use it the quickstart walks through common use cases benchmarking has its own section below advanced features have separate documentation templating generators content extraction complex validation how to extend pyresttest is its own document there are a ton of examples bastienar has created an atom editor package for pyresttest development thank you running a simple test run a basic test of the github api using json validation a simple set of tests that show how json validation can be used to check contents of a response test includes both successful and unsuccessful validation using github api for help pyresttest help interactive mode same as the other test but running in interactive mode verbose output other goodies simple templating of http request bodies urls and validators with user variables generators to create dummy data for testing with support for easily writing your own sequential tests extract info from one test to use in the next import test sets in other test sets to compose suites of tests easily easy benchmarking convert any test to a benchmark by changing the element type and setting output options if needed lightweight benchmarking ms of overhead per request and plans to reduce that in the future accurate benchmarking network measurements come from native code in libcurl so test overhead doesn t alter them optional interactive mode for debugging and demos basic test set syntax as you can see tests are defined in yaml format there are top level test syntax elements url a simple test fetches given url via get request and checks for good response code test a fully defined test see below benchmark a fully defined benchmark see below config or configuration overall test configuration timeout is the most common option import import another test set file so you don t repeat yourself import example imports are intended to let you create top level test suites that run many independent isolated test scenarios test sets they may also be used to create sample data or perform cleanup as long as you don t rely on variables to store this information for example if one testset creates a user for a set of scenarios tests that rely on that user s id need to start by querying the api to get the id url test with timeout a simple url test is equivalent to a basic get test with that url also shows how to use the timeout option in testset config to descrease the default timeout from seconds to custom http options special curl settings for advanced cases example ssl client certs sometimes you will want to use custom curl settings that don t have a corresponding option in pyresttest this is easy to do for each test you can specify custom curl arguments with curl option optionname for this optionname is case insensitive and the optionname is a curl easy option with curlopt removed for example to follow redirects up to times curlopt followlocation and curlopt maxredirs note that while option names are validated no validation is done on their values syntax limitations whenever possible the yaml configuration handler tries to convert variable types as needed we re all responsible adults don t do anything crazy and it will play nicely only a handful of elements can use dynamic variables urls headers request bodies validators there are plans to change this in the next few releases the templating is quite limited it s doing simple string subsitution there are plans to improve this in the next few releases but it isn t there yet one caveat if you define the same element example url twice in the same enclosing element the last value will be used in order to preserve sanity i use last value wins no support for for each on requests responses natively this can be done via custom extensions and may be available in the distant future but it s a while out benchmarking oh yes please pyresttest allows you to collect low level network performance metrics from curl itself benchmarks are based off of tests they extend the configuration elements in a test allowing you to configure the rest call similarly however they do not perform validation on the http response instead they collect metrics there are a few custom configuration options specific to benchmarks warmup runs default if unspecified run the benchmark calls this many times before starting to collect data to allow for jvm warmup caching etc benchmark runs default if unspecified run the benchmark this many times to collect data output file default is none file name to write benchmark output to will get overwritten with each run if none given will write to terminal only output format default csv if unspecified format to write the results in json or csv more on this below metrics which metrics to gather explained below must be specified or benchmark will do nothing metrics there are two ways to collect performance metrics raw data and aggregated stats each metric may yield raw data plus one or more aggregate values raw data returns an array of values one for each benchmark run aggregates runs a reduction function to return a single value over the entire benchmark run median average etc to return raw data in the metrics configuration element simply input the metric name in a list of values the example below will return raw data for total time and size of download values each aggregates are pretty straightforward mean or mean arithmetic arithmetic mean of data normal average mean harmonic harmonic mean of data useful for rates median median the value in the middle of sorted result set std deviation standard deviation of values useful for measuring how consistent they are total or sum total up the values given currently supported metrics are listed below and these are a subset of curl getinfo variables these variables are explained here with the curlinfo prefix removed curl easy get info documentation metrics appconnect time connect time namelookup time num connects pretransfer time redirect count redirect time request size size download size upload speed download speed upload starttransfer time total time benchmark report formats csv is the default report format csv ouput will include benchmark name benchmark group benchmark failure count raw http failures raw data arrays as a table with headers being the metric name sorted alphabetically aggregates a table of results in the format of metricname aggregate name result in json the data is structured slightly differently samples rpm based installation pure rpm based install it s easy to build and install from rpm building the rpm installing from rpm you need to install pyyaml pycurl manually because python distutils can t translate python dependencies to rpm packages gotcha python distutils add a dependency on your major python version this means you can t build an rpm for a system with python on a python system building an rpm for rhel centos you ll need to install rpm build and then it should work project policies pyresttest uses the github flow the master branch is an integration branch for mature features releases are cut periodically from master every months generally or more often if breaking bugs are present and released to pypi feature development is done in feature branches and merged to master by pr when tested validated by continuous integration in jenkins the stable branch tracks the last release use this if you want to run pyresttest from source the changelog is here this will show past releases and features merged to master for the next release but not released testing tested on ubuntu python and centos python plus debian wheezy for python releases occur every few months to pypi once a few features are ready to go pyresttest uses semantic versioning back compatibility is important pyresttest makes a strong effort to maintain command line and yaml format back compatibility since extension method signatures are maintained as much as possible however internal python implementations are subject to change major version releases x to x etc may introduce breaking api changes but only with a really darned good reason and only there s not another way feedback and contributions we welcome any feedback you have including pull requests reported issues etc for new contributors there are a whole set of issues labelled with help wanted which are excellent starting points to offer a contribution for instructions on how to set up a dev environment for pyresttest see building md for pull requests to get easily merged please include unit tests and functional tests as appropriate and verify that run tests sh passes include documentation as appropriate attempt to adhere to pep style guidelines and project style bear in mind that this is largely a one man outside of working hours effort at the moment so response times will vary that said every feature request gets heard and even if it takes a while all the reasonable features will get incorporated if you fork the main repo check back periodically you may discover that the next release includes something to meet your needs and then some faq why not pure python tests this is written for an environment where python is not the sole or primary language you totally can do pure python tests if you want extensions provide a stable api for adding more complex functionality in python all modules can be imported and used as libraries gotcha the project is still young so internal implementation may change often much more than yaml features why yaml and not xml json xml is extremely verbose and has many gotchas for parsing you can use json for tests it s a subset of yaml see miniapp test json for an example yaml tends to be the most concise natural and easy to write of these three options does it do load tests no this is a separate niche and there are already many excellent tools to fill it adding load testing features would greatly increase complexity but some form might come eventually why do you use pycurl and not requests maybe eventually pyresttest needs the low level features of pycurl for benchmarking and benefits from its performance however we may eventually abstract some of the core testing features away to allow for pure python execution", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "python restful api testing microbenchmarking tool documentation at", "pypi_keywords_clean": "rest web http testing"}, "DanielJDufour/date-extractor": {"git_readme_clean": "date extractor date extractor helps you extract dates from text installation use returning precision features languages supported arabic english french sorani kurdish turkish testing to test the package run if you are using python you may need to run the following to test versions works on python and users if you use date extractor and don t mind sharing that let us know and we can note it on the readme it will be helpful for potential users to see how people are using it", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "date extractor date extractor helps you extract dates from text installation use returning precision features languages supported arabic english french sorani kurdish turkish testing to test the package run if you are using python you may need to run the following to test versions works on python and users if you use date extractor and don t mind sharing that let us know and we can note it on the readme it will be helpful for potential users to see how people are using it", "pypi_keywords_clean": "data datetime extraction python tagging"}, "/labyrinth": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "labyrinth labyrinth is a maze like game created as a project in the uwpce python certificate program this version is set up as a complete python package", "pypi_keywords_clean": ""}, "/pygal": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "", "pypi_keywords_clean": "svg"}, "csparpa/pyowm": {"git_readme_clean": "pyowm a python wrapper around openweathermap web apis what is it pyowm is a client python wrapper library for openweathermap owm web apis it allows quick and easy consumption of owm data from python applications via a simple object model and in a human friendly fashion with pyowm you can integrate into your code any of the following openweathermap web apis weather api v providing current weather data weather forecasts weather history agro api v providing soil data and satellite imagery search and download air pollution api v providing data about co o no and so uv index api v providing data about ultraviolet exposition stations api v allowing to create and manage meteostation and publish local weather measurements weather alerts api v allowing to set triggers on weather conditions and areas and poll for spawned alerts image tiles for several map layers provided by owm pyowm runs on python and python but watch out python x will eventually be dropped check details out pyowm also integrates with django models installation install with for your ease there is a lot of alternatives setuptools windows installers and common package managers such as yaourt arch linux and yast zypper opensuse eager to fetch the very latest updates to pyowm install the development trunk usage api key as openweathermap apis need a valid api key to allow responses pyowm won t work if you don t provide one this stands for both free and paid pro subscription plans you can signup for a free api key on the owm website please notice that the free api subscription plan is subject to requests throttling examples that s a simple example of what you can do with pyowm weather api and a free owm api key and this is an example using a paid owm api key documentation the library software api documentation is available on read the docs each release has its own changelog contributing contributors coding testing packaging reporting issues are welcome see the the official documentation website for details or the contributing md file for a quick primer community join the pyowm public slack team by signing up here here are some cool projects that use pyowm references openweathermap website openweathermap web api docs license mit license", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "pyowm is a client python wrapper library for openweathermap web apis it allows quick and easy consumption of owm data from python applications via a simple object model and in a human friendly fashion", "pypi_keywords_clean": "openweathermap web api client weather forecast uv alerting owm pollution meteostation agro agriculture"}, "pyexcel-renderers/pyexcel-handsontable": {"git_readme_clean": "pyexcel handsontable let you focus on data instead of file formats support the project if your company has embedded pyexcel and its components into a revenue generating product please support me on or to maintain the project and develop it further if you are an individual you are welcome to support me too and for however long you feel like as my backer you will receive and your issues will get prioritized if you would like to become my patreon as with your financial support i will be able to invest a little bit more time in coding documentation and writing interesting posts known constraints fonts colors and charts are not supported introduction pyexcel handsontable is a rendering plugin to and renders and into a in your web page as long as you have a browser you could view the data however please note that this library does not aim to replace any current excel softwares such as micorsoft office but it aims to extends the capability of a python user developer in viewing plain data main features transform your excel sheets into excel alike html file embed your excel sheets into your web page show your data like excel in jupyter notebook added in here is one liner to use it with pyexcel code block python alternatively you can use this library with pyexcel cli module please remember to give this file suffix always handsontable html it is because triggers this plugin in pyexcel screenshots view as html image view in jupyter notebook image installation you can install pyexcel handsontable via pip code block bash or clone it and install it code block bash development guide development steps for code changes git clone cd pyexcel handsontable upgrade your setup tools and pip they are needed for development and testing only pip install upgrade setuptools pip then install relevant development requirements pip install r rnd requirements txt if such a file exists pip install r requirements txt pip install r tests requirements txt once you have finished your changes please provide test case s relevant documentation and update changelog rst note how to test your contribution although and are both used in code testing it is adviable that unit tests are put in tests is incorporated only to make sure the code examples in documentation remain valid across different development releases on linux unix systems please launch your tests like this on windows systems please issue this command how to update test environment and update documentation additional steps are required pip install moban git clone generic setup git clone commons make your changes in directory then issue command what is pyexcel commons many information that are shared across pyexcel projects such as this developer guide license info etc are stored in project what is moban d stores the specific meta data for the library acceptance criteria has test cases written has all code lines tested passes all travis ci builds has fair amount of documentation if your change is complex please update changelog rst please add yourself to contributors rst agree on new bsd license for your contribution update styles control the look and feel of the frame in order to view the changes in that file you will need to compile moban and install it here is the sequence of commands then please open handsontable html from demo directory license new bsd license", "git_description_clean": "a pyexcel plugin to render data as handsontable in html pages", "git_keywords_clean": "html handsontable", "pypi_description_clean": "pyexcel handsontable let you focus on data instead of file formats support the project if your company has embedded pyexcel and its components into a revenue generating product please support me on or to maintain the project and develop it further if you are an individual you are welcome to support me too and for however long you feel like as my backer you will receive and your issues will get prioritized if you would like to become my patreon as with your financial support i will be able to invest a little bit more time in coding documentation and writing interesting posts known constraints fonts colors and charts are not supported introduction pyexcel handsontable is a rendering plugin to and renders and into a in your web page as long as you have a browser you could view the data however please note that this library does not aim to replace any current excel softwares such as micorsoft office but it aims to extends the capability of a python user developer in viewing plain data main features transform your excel sheets into excel alike html file embed your excel sheets into your web page show your data like excel in jupyter notebook added in here is one liner to use it with pyexcel code block python alternatively you can use this library with pyexcel cli module please remember to give this file suffix always handsontable html it is because triggers this plugin in pyexcel screenshots view as html image view in jupyter notebook image installation you can install pyexcel handsontable via pip code block bash or clone it and install it code block bash development guide development steps for code changes git clone cd pyexcel handsontable upgrade your setup tools and pip they are needed for development and testing only pip install upgrade setuptools pip then install relevant development requirements pip install r rnd requirements txt if such a file exists pip install r requirements txt pip install r tests requirements txt once you have finished your changes please provide test case s relevant documentation and update changelog rst note how to test your contribution although and are both used in code testing it is adviable that unit tests are put in tests is incorporated only to make sure the code examples in documentation remain valid across different development releases on linux unix systems please launch your tests like this on windows systems please issue this command how to update test environment and update documentation additional steps are required pip install moban git clone generic setup git clone commons make your changes in directory then issue command what is pyexcel commons many information that are shared across pyexcel projects such as this developer guide license info etc are stored in project what is moban d stores the specific meta data for the library acceptance criteria has test cases written has all code lines tested passes all travis ci builds has fair amount of documentation if your change is complex please update changelog rst please add yourself to contributors rst agree on new bsd license for your contribution update styles control the look and feel of the frame in order to view the changes in that file you will need to compile moban and install it here is the sequence of commands then please open handsontable html from demo directory license new bsd license change log updated keep the access to the rendered handsontables pass on custom handsontable configurations added support jupyter notebook added initial release", "pypi_keywords_clean": "python"}, "/pytorch": {"git_readme_clean": "", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "you tried to install pytorch the package named for pytorch is torch", "pypi_keywords_clean": ""}, "hakanzy/django-system-monitor": {"git_readme_clean": "django system monitor simple system monitoring in django admin panel features cpu usage memory usage disk usage with partitions network usage top memory used processes viewing only with django superuser it currently supports linux windows osx and freebsd psutil supported requirements psutil screenshots installation usage pip install django system monitor after setup add sysmon to your installed apps that s all authors hakan ozay contributors rafael carcio peter heise cihan okyay fatih erikli john sykora tuna vargi", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "readme md", "pypi_keywords_clean": ""}, "nongiach/exall": {"git_readme_clean": "exall ease exception handling in python except them all exall is an exception manager based on decorator context callback exall separates code logic from error handling this reduces code duplication and ease development examples exall easily creates rules to associate exceptions with callbacks using decorators with exall without exall install callbacks you are encouraged to create your own callbacks but here are the default callback output warning print warning error and exit print error by chaign c hexpressoteam", "git_description_clean": "", "git_keywords_clean": "", "pypi_description_clean": "", "pypi_keywords_clean": "exception"}}